package org.irri.breedingtool.graphs.dialog;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.layout.GridDataFactory;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.TreeItem;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.application.model.ProjectExplorerTreeNodeModel;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.manager.impl.DataManipulationManager;
import org.irri.breedingtool.manager.impl.ProjectExplorerManager;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.GraphsUtilities;
import org.irri.breedingtool.utility.PBToolAnalysisUtilities;
import org.irri.breedingtool.utility.WindowDialogControlUtil;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.wb.swt.ResourceManager;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.widgets.Spinner;

public class PieChartDialog extends Dialog {

	private ProjectExplorerTreeNodeModel fileModel;
	private ArrayList<String> varInfo;
	private List numVarList;
	private List factorVarList;
	private List responseVarList;
	private Button addBtn;
	private Button moveBtn;
	private String[] numericVariables;
	private String[] factorVariables;
	private File file;
	private DataManipulationManager dataManipulationManager = new DataManipulationManager();
	private String[] barsRepresentList={"freq", "mean", "median", "sum"};
	private String[] labelsList = {"none", "counts", "pcts", "cats", "countcats", "pctcats"};

	//specify parameters (default values)
	private String cVar = null;
	private String mTitle = null; 
	private String byVar = null; 
	private String showLeg = "FALSE";
	private String legPos = null;; //"bottomright" if showLeg = "TRUE"
	private String legTitle = null; 
	private String boxed = "FALSE"; 
	private String multGraphs = "FALSE";
	private int numRowsGraphs = 1;
	private int numColsGraphs = 1; 
	private String orientGraphs = "top-bottom"; // #c("left-right", "top-bottom"))
	private String wVar = null; //may not be provided by user
	private String[] sliceColors = {"rgb(255,0,255, max = 255)"}; // - for each slice default: different shades of gray or Auto?
	private String useLabels = "none"; 
	private int[] pieDensity = null;// {100 - solid, 10 - others}
	private int[] pieLineAngle = null; //{0 - solid or horizontal, 45 - forward diagonal, 90 - vertical, 135 - backward diagonal

	private RGB[] grayShadesRGB;
	private String analysisType;
	private TableColumn tableColumn;
	private Button addAxisBtn;
	private Button addGroupsBtn;
	private List axisVarList;
	private List groupsVarList;
	private Text mainTitleText;
	private Text legTitleText;
	private TabItem tbtmModelSpecifications;
	private CCombo legPositionComo;
	private CCombo orientGraphsCombo;
	private Button btnShowLegend;
	private Button btnDrawBoxAround;
	private Button btnDisplayMultipleGraphs;
	private Spinner numColsSpinner;
	private Spinner numRowsSpinner;
	private Label lblPosition;
	private Label lblTitle;
	private Label lblNewLabel;
	private Label lblNumberOfColumns;
	private Label lblOrientation;
	private Label lblFormatSlices;
	private Label lblLabels;
	private Table table;
	private TabItem tbtmDisplay;
	private Composite composite_2;
	private Label lblInputFileContains;
	private Button btnRawData;
	private Button btnRadioButton;
	private Label lblResponseVariables;
	private CCombo combo;
	private Shell parentShell;

	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public PieChartDialog(Shell parentShell, String analysisType, File file) {
		super(parentShell);
		setShellStyle(SWT.BORDER | SWT.CLOSE | SWT.MIN | SWT.RESIZE);
		setBlockOnOpen(false);
		this.parentShell = parentShell;
		this.analysisType = analysisType;
		this.file=file;
		setFactors();
	}

	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		getShell().setData("analysis", analysisType);
		getShell().setData("filePathID",file.getAbsolutePath());
		WindowDialogControlUtil.addWindowDialogToList(getShell());

		parent.addDisposeListener(new DisposeListener(){
			@Override
			public void widgetDisposed(DisposeEvent e) {
				// TODO Auto-generated method stub
				WindowDialogControlUtil.removeWindowDialogToList(getShell());
			}

		});

		parent.getShell().setText("Pie Chart: "+dataManipulationManager.getDisplayFileName(file.getAbsolutePath()));
		Composite container = (Composite) super.createDialogArea(parent);

		TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));

		tbtmModelSpecifications = new TabItem(tabFolder, SWT.NONE);
		tbtmModelSpecifications.setText("Variable Definition");

		Composite modelComposite = new Composite(tabFolder, SWT.NONE);
		tbtmModelSpecifications.setControl(modelComposite);
		modelComposite.setLayout(new GridLayout(5, false));

		lblInputFileContains = new Label(modelComposite, SWT.NONE);
		lblInputFileContains.setText("Input File Contains:");

		btnRawData = new Button(modelComposite, SWT.RADIO);
		btnRawData.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				addBtn.setEnabled(false);
				if(responseVarList.getItemCount()>0) dataManipulationManager.removeItemOfThenAddTo(responseVarList, numVarList);
				responseVarList.setEnabled(false);
				lblResponseVariables.setEnabled(false);
			}
		});
		btnRawData.setSelection(true);
		btnRawData.setText("Raw Data");

		btnRadioButton = new Button(modelComposite, SWT.RADIO);
		btnRadioButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				numVarList.setSelection(-1);
				responseVarList.setEnabled(true);
				lblResponseVariables.setEnabled(true);
			}
		});
		btnRadioButton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 3, 1));
		btnRadioButton.setText("Frequencies");

		Label lblNumericVariables = new Label(modelComposite, SWT.NONE);
		lblNumericVariables.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		lblNumericVariables.setText("Numeric Variables:");
		new Label(modelComposite, SWT.NONE);
		new Label(modelComposite, SWT.NONE);

		lblResponseVariables = new Label(modelComposite, SWT.NONE);
		lblResponseVariables.setEnabled(false);
		lblResponseVariables.setText("Weight Variable:");

		numVarList = new List(modelComposite, SWT.BORDER | SWT.V_SCROLL);
		GridData gd_numVarList = new GridData(SWT.FILL, SWT.FILL, true, false, 2, 1);
		gd_numVarList.heightHint = 95;
		gd_numVarList.widthHint = 126;
		numVarList.setLayoutData(gd_numVarList);
		numVarList.setItems(numericVariables);
		numVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				//				List list=(List) e.getSource();
				if(numVarList.getSelectionCount()>0 && lblResponseVariables.getEnabled() && responseVarList.getItemCount()<1){
					dataManipulationManager.moveSelectedStringFromTo( numVarList, responseVarList);
					numVarList.remove(numVarList.getSelectionIndices());
					addBtn.setEnabled(false);
				}
				else{
					if(lblResponseVariables.getEnabled()) MessageDialog.openWarning(getShell(), "Invalid Input", "You can only enter a single weight variable.");
				}
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(numVarList.getSelectionCount()>0){
					moveBtn.setEnabled(true);
					factorVarList.setSelection(-1);
					responseVarList.setSelection(-1);
					addBtn.setText("Add");
					moveBtn.setText("Set to Factor");
					enableFactorButtons(false);
					enableNumericButtons(true);
				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});

		addBtn = new Button(modelComposite, SWT.NONE);
		addBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(numVarList.getSelectionCount()>0) {//if the purpose is to add
					String selectedNumVars[] = numVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						responseVarList.add(selectedNumVars[i]);
					}
					numVarList.remove(numVarList.getSelectionIndices());
				}
				else{//if the purpose is to remove
					String selectedNumVars[] = responseVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						numVarList.add(selectedNumVars[i]);
					}
					responseVarList.remove(responseVarList.getSelectionIndices());
				}

				enableNumericButtons(false);
			}
		});
		addBtn.setEnabled(false);
		GridData gd_addBtn = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1);
		gd_addBtn.widthHint = 52;
		addBtn.setLayoutData(gd_addBtn);
		addBtn.setText("Add");

		responseVarList = new List(modelComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		responseVarList.setEnabled(false);
		GridData gd_responseVarList = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_responseVarList.widthHint = 111;
		responseVarList.setLayoutData(gd_responseVarList);
		responseVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				if(responseVarList.getSelectionCount()>0){
					dataManipulationManager.moveSelectedStringFromTo( responseVarList, numVarList);
					responseVarList.remove(responseVarList.getSelectionIndices());
					addBtn.setEnabled(false);
				}
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(responseVarList.getSelectionCount()>0){
					numVarList.setSelection(-1);
					addBtn.setText("Remove");
					addBtn.setEnabled(true);
					moveBtn.setEnabled(false);
					enableFactorButtons(false);
				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});

		Label lblFactors = new Label(modelComposite, SWT.NONE);
		lblFactors.setText("Factors:");

		moveBtn = new Button(modelComposite, SWT.NONE);
		moveBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e){
				if(numVarList.getSelectionCount()>0){//if move Down
					String selectedNumVars[] = numVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						factorVarList.add(selectedNumVars[i]);
						dataManipulationManager.editVariableType(file.getAbsolutePath(),varInfo, selectedNumVars[i],"Factor");
					}
					numVarList.remove(numVarList.getSelectionIndices());
					enableNumericButtons(false);
				}
				else{// move up
					String selectedNumVars[] = factorVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						numVarList.add(selectedNumVars[i]);
						dataManipulationManager.editVariableType(file.getAbsolutePath(),varInfo, selectedNumVars[i],"Numeric");
					}
					factorVarList.remove(factorVarList.getSelectionIndices());

					enableFactorButtons(false);
				}
			}
		});
		moveBtn.setEnabled(false);
		GridData gd_moveBtn = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_moveBtn.heightHint = 24;
		gd_moveBtn.widthHint = 90;
		moveBtn.setLayoutData(gd_moveBtn);
		moveBtn.setText("Set to Factor");
		new Label(modelComposite, SWT.NONE);
		new Label(modelComposite, SWT.NONE);

		Label lblCategory = new Label(modelComposite, SWT.NONE);
		lblCategory.setText("Categorize by:");

		factorVarList = new List(modelComposite, SWT.BORDER | SWT.V_SCROLL);
		GridData gd_factorVarList = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 3);
		gd_factorVarList.widthHint = 65;
		factorVarList.setLayoutData(gd_factorVarList);
		factorVarList.setItems(factorVariables);
		factorVarList.addListener(SWT.MouseDown, new Listener(){

			@Override
			public void handleEvent(Event event) {
				if(factorVarList.getSelectionIndex()>-1){
					enableNumericButtons(false);
					enableFactorButtons(false);
					numVarList.setSelection(-1);
					String[] s=factorVarList.getSelection();
					String isNumeric = dataManipulationManager.isNumeric(file.getAbsolutePath().replaceAll("\\\\","/"), s[0]);
					if(isNumeric.equals("TRUE")){
						moveBtn.setText("Set to Numeric");
						moveBtn.setEnabled(true);
					}
					else moveBtn.setEnabled(false);
					enableFactorButtons(true);

				}
			}
		});

		addAxisBtn = new Button(modelComposite, SWT.NONE);
		addAxisBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(factorVarList.getSelectionCount()>0) {//if the purpose is to add
					getLevelsThenAddItemToVarTable(factorVarList.getSelection()[0]);
					dataManipulationManager.moveSelectedStringFromTo( factorVarList, axisVarList);
				}
				else{//if the purpose is to remove
					removeItemsFromVarTable();
					dataManipulationManager.moveSelectedStringFromTo( axisVarList, factorVarList);
				}
				enableFactorButtons(false);
			}
		});
		GridData gd_addAxisBtn = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1);
		gd_addAxisBtn.widthHint = 52;
		addAxisBtn.setLayoutData(gd_addAxisBtn);
		addAxisBtn.setText("Add");
		addAxisBtn.setEnabled(false);

		axisVarList = new List(modelComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		axisVarList.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));
		axisVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				if(axisVarList.getSelectionCount()>0){
					removeItemsFromVarTable();
					dataManipulationManager.moveSelectedStringFromTo( axisVarList, factorVarList);
					addAxisBtn.setEnabled(false);
				}
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(axisVarList.getSelectionCount()>0){
					factorVarList.setSelection(-1);
					addAxisBtn.setText("Remove");
					addAxisBtn.setEnabled(true);
				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});
		new Label(modelComposite, SWT.NONE);
		new Label(modelComposite, SWT.NONE);

		Label lblCreatePlotsBy = new Label(modelComposite, SWT.NONE);
		lblCreatePlotsBy.setText("Group by:");

		addGroupsBtn = new Button(modelComposite, SWT.NONE);
		addGroupsBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(factorVarList.getSelectionCount()>0) {//if the purpose is to add
					dataManipulationManager.moveSelectedStringFromTo( factorVarList, groupsVarList);
				}
				else{//if the purpose is to remove
					dataManipulationManager.moveSelectedStringFromTo( groupsVarList, factorVarList);
				}
				enableFactorButtons(false);
			}
		});
		GridData gd_addGroupsBtn = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1);
		gd_addGroupsBtn.widthHint = 52;
		addGroupsBtn.setLayoutData(gd_addGroupsBtn);
		addGroupsBtn.setText("Add");
		addGroupsBtn.setEnabled(false);

		groupsVarList = new List(modelComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		groupsVarList.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		groupsVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				if(groupsVarList.getSelectionCount()>0){
					dataManipulationManager.moveSelectedStringFromTo( groupsVarList, factorVarList);
					addGroupsBtn.setEnabled(false);
				}
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(groupsVarList.getSelectionCount()>0){
					factorVarList.setSelection(-1);
					addGroupsBtn.setText("Remove");
					addGroupsBtn.setEnabled(true);
				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});

		tbtmDisplay = new TabItem(tabFolder, SWT.NONE);
		tbtmDisplay.setText("Display Options");

		composite_2 = new Composite(tabFolder, SWT.NONE);
		tbtmDisplay.setControl(composite_2);
		composite_2.setLayout(new GridLayout(6, false));

		Label lblMainTitle = new Label(composite_2, SWT.NONE);
		lblMainTitle.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMainTitle.setText("Main Title:");

		mainTitleText = new Text(composite_2, SWT.BORDER);
		mainTitleText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 5, 1));

		lblFormatSlices = new Label(composite_2, SWT.NONE);
		lblFormatSlices.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
		lblFormatSlices.setText("Format slices:");
		new Label(composite_2, SWT.NONE);

		table = new Table(composite_2, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
		GridData gd_table = new GridData(SWT.FILL, SWT.FILL, true, true, 5, 2);
		gd_table.heightHint = 60;
		gd_table.widthHint = 204;
		table.setLayoutData(gd_table);
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		new Label(composite_2, SWT.NONE);

		TableColumn tblclmnNewColumn = new TableColumn(table, SWT.NONE);
		tblclmnNewColumn.setWidth(100);
		tblclmnNewColumn.setText("Variable Level(s)");

		TableColumn tblclmnNewColumnf = new TableColumn(table, SWT.NONE);
		tblclmnNewColumnf.setWidth(75);
		tblclmnNewColumnf.setText("Color");

		TableColumn tblclmnNewColumn_1 = new TableColumn(table, SWT.NONE);
		tblclmnNewColumn_1.setWidth(25);

		TableColumn tblclmnNewColumn3 = new TableColumn(table, SWT.NONE);
		tblclmnNewColumn3.setWidth(100);
		tblclmnNewColumn3.setText("Fill Pattern");
		tblclmnNewColumn3.pack();

		TableColumn tblclmnNewColumn4 = new TableColumn(table, SWT.NONE);
		tblclmnNewColumn4.setWidth(25);
		new Label(composite_2, SWT.NONE);

		lblLabels = new Label(composite_2, SWT.NONE);
		lblLabels.setText("Labels:");

		combo = new CCombo(composite_2, SWT.BORDER);
		combo.setItems(new String[]  {"[none]", "counts", "percentages", "levels", "levels & counts", "levels & percentages"});
		combo.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		combo.setEditable(false);
		combo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 4, 1));
		combo.select(5);

		btnDrawBoxAround = new Button(composite_2, SWT.CHECK);
		btnDrawBoxAround.setSelection(true);
		btnDrawBoxAround.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
		btnDrawBoxAround.setText("Draw box around plot");

		btnShowLegend = new Button(composite_2, SWT.CHECK);
		btnShowLegend.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnShowLegend.getSelection())enableShowLegend(true);
				else enableShowLegend(false);
			}
		});
		btnShowLegend.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
		btnShowLegend.setText("Show legend");
		new Label(composite_2, SWT.NONE);

		lblPosition = new Label(composite_2, SWT.NONE);
		lblPosition.setEnabled(false);
		lblPosition.setText("Position:");

		legPositionComo = new CCombo(composite_2, SWT.BORDER);
		legPositionComo.setEnabled(false);
		legPositionComo.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		legPositionComo.setEditable(false);
		legPositionComo.setItems(new String[] {"bottom", "bottom-left", "bottom-right", "center", "left", "right", "top", "top-left", "top-right"});
		legPositionComo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 4, 1));
		legPositionComo.select(2);
		new Label(composite_2, SWT.NONE);

		lblTitle = new Label(composite_2, SWT.NONE);
		lblTitle.setEnabled(false);
		lblTitle.setText("Title:");

		legTitleText = new Text(composite_2, SWT.BORDER);
		legTitleText.setEnabled(false);
		legTitleText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 4, 1));

		btnDisplayMultipleGraphs = new Button(composite_2, SWT.CHECK);
		btnDisplayMultipleGraphs.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnDisplayMultipleGraphs.getSelection()) displayMultipleGraphs(true);
				else displayMultipleGraphs(false);
			}
		});
		btnDisplayMultipleGraphs.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
		btnDisplayMultipleGraphs.setText("Display multiple graphs in a page");
		new Label(composite_2, SWT.NONE);

		lblNewLabel = new Label(composite_2, SWT.NONE);
		lblNewLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		lblNewLabel.setEnabled(false);
		lblNewLabel.setText("Number of rows:");

		numRowsSpinner = new Spinner(composite_2, SWT.BORDER);
		numRowsSpinner.setEnabled(false);
		numRowsSpinner.setMaximum(5);
		numRowsSpinner.setMinimum(1);
		numRowsSpinner.setSelection(2);

		lblNumberOfColumns = new Label(composite_2, SWT.NONE);
		lblNumberOfColumns.setEnabled(false);
		lblNumberOfColumns.setText("Number of columns:");

		numColsSpinner = new Spinner(composite_2, SWT.BORDER);
		numColsSpinner.setEnabled(false);
		numColsSpinner.setMaximum(5);
		numColsSpinner.setMinimum(1);
		numColsSpinner.setSelection(1);
		new Label(composite_2, SWT.NONE);

		lblOrientation = new Label(composite_2, SWT.NONE);
		lblOrientation.setEnabled(false);
		lblOrientation.setText("Orientation:");

		orientGraphsCombo = new CCombo(composite_2, SWT.BORDER);
		orientGraphsCombo.setEnabled(false);
		orientGraphsCombo.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		orientGraphsCombo.setEditable(false);
		orientGraphsCombo.setItems(new String[] {"Left-to-right", "Top-to-bottom"});
		orientGraphsCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 4, 1));
		orientGraphsCombo.select(1);
		return container;
	}

	protected void getLevelsThenAddItemToVarTable(String varName) {
		// TODO Auto-generated method stub
		String levels[] = DataManipulationManager.getEnvtLevels(varName, file);
		grayShadesRGB = GraphsUtilities.getGrayShades(levels.length);
		sliceColors = new String[levels.length];
		pieLineAngle = new int[levels.length];
		pieDensity = new int[levels.length];

		for(int i=0; i< levels.length; i++){
			sliceColors[i] = GraphsUtilities.convertToRrgbFormat(grayShadesRGB[i].toString());
			pieLineAngle[i] = 0; 
			pieDensity[i] = 100;
		}
		for(String s: levels){
			addItemToVarTable(s);
		}
		table.pack();
		composite_2.pack();
	}

	protected void displayMultipleGraphs(boolean state) {
		// TODO Auto-generated method stub
		orientGraphsCombo.setEnabled(state);
		lblOrientation.setEnabled(state);
		lblNewLabel.setEnabled(state);
		numRowsSpinner.setEnabled(state);
		lblNumberOfColumns.setEnabled(state);
		numColsSpinner.setEnabled(state);
	}

	protected void enableShowLegend(boolean state) {
		// TODO Auto-generated method stub
		lblPosition.setEnabled(state);
		legTitleText.setEnabled(state);
		lblTitle.setEnabled(state);
		legPositionComo.setEnabled(state);
	}

	protected void addItemToVarTable(final String varName) {
		// TODO Auto-generated method stub
		final int ctr=table.getItemCount();
		final TableItem tableItem = new TableItem(table, SWT.CENTER);
		tableItem.setData("index",ctr);
		tableItem.setText(0, varName); //factor Name
		tableItem.setBackground(1, new Color(Display.getCurrent(), grayShadesRGB[ctr]));
		TableEditor[] tableEditors = new TableEditor[3];

		tableEditors[0] = new TableEditor(table);
		tableEditors[1] = new TableEditor(table);
		tableEditors[2]  = new TableEditor(table);

		Button chooseColorButton = new Button(table, SWT.NONE | SWT.CENTER);
		chooseColorButton.setImage(ResourceManager.getPluginImage("Star", "icons/ellipsis.png"));
		chooseColorButton.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
		chooseColorButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				table.setSelection(-1);
				try{
					RGB rgbColor = GraphsUtilities.chooseColor();
					tableItem.setBackground(1, new Color(Display.getCurrent(), rgbColor));
					System.out.println("replace color at index"+ tableItem.getData("index").toString());
					int index = Integer.parseInt(tableItem.getData("index").toString());
					sliceColors[index] = GraphsUtilities.convertToRrgbFormat(rgbColor.toString());
				}catch(Exception ex){
					System.out.println("Exception at RGB choose color");
				}
			}
		});
		Button chooseFillButton = new Button(table,SWT.NONE | SWT.CENTER);
		chooseFillButton.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
		chooseFillButton.setImage(ResourceManager.getPluginImage("Star", "icons/ellipsis.png"));
		final Label lblImagePlaceHolder = new Label(table, SWT.FILL | SWT.CENTER);
		lblImagePlaceHolder.setImage(ResourceManager.getPluginImage("Star", "icons/solid.png"));

		chooseFillButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				int index = Integer.parseInt(tableItem.getData("index").toString());
				ChooseFillPatternDialog fillDlg = new ChooseFillPatternDialog(getShell(), varName);
				fillDlg.open();
				if(fillDlg.getReturnCode()==0){table.setSelection(-1);
				try{
					pieLineAngle[index] = fillDlg.getPatternAngle();
					pieDensity[index] = fillDlg.getLineDensity();
					lblImagePlaceHolder.setImage(ResourceManager.getPluginImage("Star", "icons/"+fillDlg.getChosenPattern()+".png"));
				}catch(Exception ex){}
				//insert getAngle of fill pattern here
				}
			}
		});

		//			colorEditor.grabVertical = true;
		tableEditors[0].grabHorizontal = true;

		//			fillEditor.grabVertical = true;
		tableEditors[1].grabHorizontal = true;

		//			displayFillEditor.grabVertical = true;
		tableEditors[2].grabHorizontal = true;

		tableEditors[0].setEditor(chooseColorButton, tableItem, 2);
		tableEditors[1].setEditor(chooseFillButton, tableItem, 4);
		tableEditors[2].setEditor(lblImagePlaceHolder, tableItem, 3);

		tableItem.setData("Editors", tableEditors);
	}


	protected void removeItemsFromVarTable() {
		for(int item=0;item<table.getItemCount(); item++){
			TableItem tableItem = table.getItem(item);
			TableEditor[] editors = (TableEditor[])tableItem.getData("Editors");
			for(TableEditor te : editors){
				te.getEditor().dispose();
			}
		}
		table.clearAll();
		table.removeAll();
		table.pack();
		composite_2.pack();
	}

	protected void setFactors() {
		// TODO Auto-generated method stub
		varInfo=dataManipulationManager.getVarInfoFromFile(file.getAbsolutePath());
		numericVariables=dataManipulationManager.getNumericVars(varInfo);
		factorVariables=dataManipulationManager.getFactorVars(varInfo);
	}

	public void enableFactorButtons(boolean state){
		groupsVarList.setSelection(-1);
		axisVarList.setSelection(-1);

		addGroupsBtn.setEnabled(state);
		addAxisBtn.setEnabled(state);
		if(state){
			addGroupsBtn.setText("Add");
			addAxisBtn.setText("Add");
			if(groupsVarList.getItemCount()>0)addGroupsBtn.setEnabled(false);
			if(axisVarList.getItemCount()>0)addAxisBtn.setEnabled(false);
		}
	}

	public void enableNumericButtons(boolean state){
		if(state && lblResponseVariables.getEnabled() && responseVarList.getItemCount()<1) addBtn.setEnabled(state);
		//		else if(state && responseVarList.getItemCount()>0) addBtn.setEnabled(false);
		else addBtn.setEnabled(false);
		moveBtn.setEnabled(state);
	}

	@Override
	protected void buttonPressed(int buttonId) { //when Reset button is pressed
		if (buttonId == IDialogConstants.DESELECT_ALL_ID) {
			System.out.println("graph type: " + analysisType);
			PieChartDialog graph = new PieChartDialog(parentShell,analysisType,file);
			close();
			graph.open();
		}
		super.buttonPressed(buttonId);
	}

	/**
	 * Create contents of the button bar.
	 * @param parent
	 */

	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.DESELECT_ALL_ID, "Reset", true);
		createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	@Override
	protected void okPressed(){
		if(axisVarList.getItemCount()<1) MessageDialog.openWarning(getShell(), "Enter Required Fields", "Please select a category axis variable.");
		else if(btnRadioButton.getSelection() && responseVarList.getItemCount()<1)MessageDialog.openWarning(getShell(), "Enter Required Fields", "Please select a weight variable.");
		else{//if all conditions are satisfied

			cVar = axisVarList.getItem(0);
			mTitle = mainTitleText.getText(); //null; //
			if(groupsVarList.getItemCount()<1)byVar = null;
			else byVar = groupsVarList.getItem(0);

			if(btnShowLegend.getSelection()){
				showLeg = "TRUE"; //"FALSE"; //
				legPos = legPositionComo.getText().replaceAll("-", ""); //eight other choices

				if(!legTitleText.getText().isEmpty())legTitle = legTitleText.getText(); //null; //
				else legTitle = null;

				//				legTitle = legTitleText.getText(); //null; //
			}
			else{
				showLeg = "FALSE";
				legPos = null;
				legTitle = null;
			}

			if(btnDrawBoxAround.getSelection()) boxed = "TRUE"; //
			else boxed = "FALSE"; //"TRUE"; //

			if(btnDisplayMultipleGraphs.getSelection()){
				multGraphs = "TRUE"; //"TRUE"; //
				numRowsGraphs = numRowsSpinner.getSelection();
				numColsGraphs = numColsSpinner.getSelection();
				orientGraphs = orientGraphsCombo.getText().replace("to-", "").toLowerCase();
			}
			else{
				multGraphs = "FALSE";
				numRowsGraphs = 1;
				numColsGraphs = 1;
				orientGraphs = "top-bottom";
			}

			useLabels = labelsList[combo.getSelectionIndex()];

			boolean continueWithPie = true;

			if(responseVarList.getItemCount()>0){
				wVar = responseVarList.getItems()[0];
				String[] levelsWithOneValue = ProjectExplorerView.rJavaManager.getRJavaDataManipulationManager().checkLevelsWithMoreThanOneDatum(file.getAbsolutePath().replaceAll("\\\\", "/"), cVar, wVar, byVar);
				if(levelsWithOneValue[0].equals("FALSE")){
					MessageDialog.openError(getShell(), "Invalid Input", "There are category level(s) with more than one frequency.");
					continueWithPie=false;
				}
				else if(!levelsWithOneValue[0].equals("FALSE") && !levelsWithOneValue[0].equals("TRUE")){
					StringBuilder sb = new StringBuilder();
					for(String s: levelsWithOneValue){
						sb.append(s);
						sb.append("\n");
					}
					MessageDialog.openError(getShell(), "Invalid Input", "There are category level(s) with more than one frequency:\n" + sb.toString());
					continueWithPie=false;
				}
			}
			else wVar = null;
			
			if(continueWithPie){
				String dataFileName = file.getAbsolutePath().replaceAll("\\\\", "/");

				File outputFolder = GraphsUtilities.createOutputFolder(file.getName(),analysisType);
				if(!outputFolder.exists()) outputFolder.mkdir();

				OperationProgressDialog rInfo = new OperationProgressDialog(getShell(), "Creating Pie Chart");
				rInfo.open();

				ProjectExplorerView.rJavaManager.getRJavaGraphManager().createGraphPie(outputFolder.getAbsolutePath().replaceAll("\\\\", "/")+"/", dataFileName, cVar, mTitle, wVar,
						byVar, sliceColors, useLabels, showLeg, legPos, legTitle, pieDensity, pieLineAngle, boxed,
						multGraphs, numRowsGraphs, numColsGraphs, orientGraphs);

				rInfo.close();
				WindowDialogControlUtil.hideAllWindowDialog();

				GraphsUtilities.openFolder(outputFolder);
			}
		}
	}

	/**
	 * Return the initial size of the dialog.
	 */

	@Override
	protected Point getInitialSize() {
		return new Point(710, 622);
	}

	/**
	 * Return the initial size of the dialog.
	 */

	@Override
	protected boolean isResizable() {
		return true;
	}

}