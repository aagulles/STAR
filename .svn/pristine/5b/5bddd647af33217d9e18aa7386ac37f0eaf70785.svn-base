package org.irri.breedingtool.star.analysis.dialog;

import java.io.File;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.DialogFormUtility;
import org.irri.breedingtool.utility.StarAnalysisUtilities;

public class TTestIndependentSampleDialog extends Dialog {
	private String filePath = PartStackHandler.getActiveElementID();
	private List lstNumericVariables;
	private Button btnToFactor;
	private Button btnSummaryStatistics;
	private Combo cmbAlternativeHypothesis;
	private Spinner txtConfidenceInterval;
	private Button btnAndersondarling;
	private Button btnCramervonMises;
	private Button btnLilliefors;
	private Button btnShapirofrancia;
	private Button btnShapirowilk;
	private DialogFormUtility listManager = new DialogFormUtility();
	private Button btnConfidenceInterval;
	private List lstTestVariables;
	private Group grpTestForNormality;
	private Button btnOkay;
	private Label lblFactors;
	private List lstFactors;
	private Text txtGroupingVariable;
	private Button btnAddRemove2;
	private Label lblNewLabel;
	private Button btnAddRemove1;
	private Label lblLevelOfSig;
	private Spinner txtLevelOfSig;
	private Group grpDisplay;

	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public TTestIndependentSampleDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.BORDER | SWT.CLOSE | SWT.MIN | SWT.RESIZE);
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Two Independent Sample t-Test: " + new File(filePath).getName());
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		FillLayout fl_container = new FillLayout(SWT.HORIZONTAL);
		fl_container.marginHeight = 8;
		fl_container.marginWidth = 8;
		container.setLayout(fl_container);
		
		TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		
		TabItem tbtmTitleCase = new TabItem(tabFolder, SWT.NONE);
		tbtmTitleCase.setText("Variable Description");
		
		Composite composite = new Composite(tabFolder, SWT.NONE);
		tbtmTitleCase.setControl(composite);
		composite.setLayout(new GridLayout(3, false));
		
		Label lblNumericVariables = new Label(composite, SWT.NONE);
		lblNumericVariables.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblNumericVariables.setText("Numeric Variable(s):");
		new Label(composite, SWT.NONE);
		
		Label lblTestVariables = new Label(composite, SWT.NONE);
		lblTestVariables.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblTestVariables.setText("Test Variable(s):");
		
		lstNumericVariables = new List(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_lstNumericVariables = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstNumericVariables.heightHint = 80;
		gd_lstNumericVariables.widthHint = 80;
		lstNumericVariables.setLayoutData(gd_lstNumericVariables);
		
		btnAddRemove1 = new Button(composite, SWT.NONE);
		GridData gd_btnAddRemove1 = new GridData(SWT.CENTER, SWT.CENTER, false, false, 1, 1);
		gd_btnAddRemove1.heightHint = 22;
		gd_btnAddRemove1.widthHint = 90;
		btnAddRemove1.setLayoutData(gd_btnAddRemove1);
		btnAddRemove1.setText("Add");
		
		lstTestVariables = new List(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_lstTestVariables = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstTestVariables.widthHint = 80;
		gd_lstTestVariables.heightHint = 80;
		lstTestVariables.setLayoutData(gd_lstTestVariables);
		
		btnToFactor = new Button(composite, SWT.NONE);
		GridData gd_btnToFactor = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_btnToFactor.heightHint = 24;
		gd_btnToFactor.widthHint = 110;
		btnToFactor.setLayoutData(gd_btnToFactor);
		btnToFactor.setText("Set to Factor");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		TabItem tbtmOption = new TabItem(tabFolder, SWT.NONE);
		tbtmOption.setText("Options");
		
		Composite composite_1 = new Composite(tabFolder, SWT.NONE);
		tbtmOption.setControl(composite_1);
		composite_1.setLayout(new GridLayout(2, false));
		
		Label lblAlternativeHypothesis = new Label(composite_1, SWT.NONE);
		lblAlternativeHypothesis.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblAlternativeHypothesis.setText("Alternative Hypothesis:");
		
		cmbAlternativeHypothesis = new Combo(composite_1, SWT.READ_ONLY);
		cmbAlternativeHypothesis.setItems(new String[] {"less", "greater", "two.sided"});
		GridData gd_cmbAlternativeHypothesis = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_cmbAlternativeHypothesis.widthHint = 161;
		cmbAlternativeHypothesis.setLayoutData(gd_cmbAlternativeHypothesis);
		cmbAlternativeHypothesis.setText("two.sided");
		
		lblLevelOfSig = new Label(composite_1, SWT.NONE);
		GridData gd_lblLevelOfSig = new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1);
		gd_lblLevelOfSig.heightHint = 24;
		gd_lblLevelOfSig.widthHint = 205;
		lblLevelOfSig.setLayoutData(gd_lblLevelOfSig);
		lblLevelOfSig.setText("Level of Sig. (Testing Variance Equality): ");
		
		txtLevelOfSig = new Spinner(composite_1, SWT.BORDER);
		txtLevelOfSig.setMaximum(1000);
		txtLevelOfSig.setMinimum(1);
		txtLevelOfSig.setSelection(5);
		txtLevelOfSig.setDigits(2);
		txtLevelOfSig.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		
		grpDisplay = new Group(composite_1, SWT.NONE);
		grpDisplay.setText("Display");
		grpDisplay.setLayout(new GridLayout(3, false));
		GridData gd_grpDisplay = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
		gd_grpDisplay.heightHint = 35;
		grpDisplay.setLayoutData(gd_grpDisplay);
		
		btnSummaryStatistics = new Button(grpDisplay, SWT.CHECK);
		btnSummaryStatistics.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		btnSummaryStatistics.setText("Summary Statistics");
		new Label(grpDisplay, SWT.NONE);
		
		
		btnConfidenceInterval = new Button(grpDisplay, SWT.CHECK);
		btnConfidenceInterval.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				txtConfidenceInterval.setEnabled(btnConfidenceInterval.getSelection());
				
			}
		});
		GridData gd_btnConfidenceInterval = new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1);
		gd_btnConfidenceInterval.widthHint = 157;
		btnConfidenceInterval.setLayoutData(gd_btnConfidenceInterval);
		btnConfidenceInterval.setText("Confidence Interval");
		
		txtConfidenceInterval = new Spinner(grpDisplay, SWT.BORDER);
		txtConfidenceInterval.setPageIncrement(100);
		txtConfidenceInterval.setDigits(2);
		txtConfidenceInterval.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));
		txtConfidenceInterval.setMaximum(9900);
		txtConfidenceInterval.setMinimum(9000);
		txtConfidenceInterval.setSelection(9500);
		txtConfidenceInterval.setEnabled(false);
		
		Label label = new Label(grpDisplay, SWT.NONE);
		GridData gd_label = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_label.widthHint = 127;
		label.setLayoutData(gd_label);
		label.setText("%");
		
		grpTestForNormality = new Group(composite_1, SWT.NONE);
		grpTestForNormality.setText("Test for Normality");
		grpTestForNormality.setLayout(new GridLayout(1, false));
		grpTestForNormality.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		
		btnShapirowilk = new Button(grpTestForNormality, SWT.CHECK);
		btnShapirowilk.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, true, 1, 1));
		btnShapirowilk.setText("Shapiro-Wilk");
		btnShapirowilk.setData("swilk");
		
		btnShapirofrancia = new Button(grpTestForNormality, SWT.CHECK);
		btnShapirofrancia.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, true, 1, 1));
		btnShapirofrancia.setText("Shapiro-Francia");
		btnShapirofrancia.setData("sfrancia");
		
		btnLilliefors = new Button(grpTestForNormality, SWT.CHECK);
		btnLilliefors.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, true, 1, 1));
		btnLilliefors.setText("Lilliefors (Kolmogorov-Smirnov)");
		btnLilliefors.setData("ks");
		
		btnCramervonMises = new Button(grpTestForNormality, SWT.CHECK);
		btnCramervonMises.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, true, 1, 1));
		btnCramervonMises.setText("Cramer-Von Mises");
		btnCramervonMises.setData("cramer");
		
		btnAndersondarling = new Button(grpTestForNormality, SWT.CHECK);
		btnAndersondarling.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, true, 1, 1));
		btnAndersondarling.setText("Anderson-Darling");
		btnAndersondarling.setData("anderson");
		
		lblFactors = new Label(composite, SWT.NONE);
		lblFactors.setText("Factor(s):");
		new Label(composite, SWT.NONE);
		
		lblNewLabel = new Label(composite, SWT.NONE);
		lblNewLabel.setText("Grouping Variable:");
		
		lstFactors = new List(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		GridData gd_lstFactors = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 2);
		gd_lstFactors.widthHint = 80;
		gd_lstFactors.heightHint = 60;
		lstFactors.setLayoutData(gd_lstFactors);
		
		btnAddRemove2 = new Button(composite, SWT.NONE);
		GridData gd_btnAddRemove2 = new GridData(SWT.CENTER, SWT.FILL, false, false, 1, 1);
		gd_btnAddRemove2.heightHint = 22;
		gd_btnAddRemove2.widthHint = 90;
		btnAddRemove2.setLayoutData(gd_btnAddRemove2);
		btnAddRemove2.setText("Add");
		
		txtGroupingVariable = new Text(composite, SWT.BORDER | SWT.READ_ONLY);
		txtGroupingVariable.setBackground(SWTResourceManager.getColor(SWT.COLOR_LIST_BACKGROUND));
		GridData gd_txtGroupingVariable = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_txtGroupingVariable.widthHint = 80;
		gd_txtGroupingVariable.heightHint = 14;
		txtGroupingVariable.setLayoutData(gd_txtGroupingVariable);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		initializeContent();
		return container;
	}
	
	void initializeContent(){
		listManager.initializeSingleButtonList(lstNumericVariables, lstTestVariables, btnAddRemove1);
		listManager.initializeSingleSelectionList(lstFactors, txtGroupingVariable, btnAddRemove2);
		listManager.initializeVariableMoveList(lstNumericVariables, lstFactors, btnToFactor, filePath,2);
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath,2);
		
	}
	@Override
	protected void buttonPressed(int ID){
		if(ID == IDialogConstants.OK_ID){
			okPressed();
		}
		else if(ID == IDialogConstants.CANCEL_ID){
			cancelPressed();
		}
		else if (ID == IDialogConstants.RETRY_ID){
			resetDialog();
		}
	}
	void resetDialog(){
		lstNumericVariables.removeAll();
		lstTestVariables.removeAll();
		lstFactors.removeAll();
		txtGroupingVariable.setText("");
		
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath,2);
		cmbAlternativeHypothesis.select(2);
		txtLevelOfSig.setSelection(5);
		listManager.setCheckBoxesToBoolean(false, grpDisplay,grpTestForNormality);
		txtConfidenceInterval.setSelection(9500);
		txtConfidenceInterval.setEnabled(false);
		btnAddRemove1.setText("Add");
		btnAddRemove2.setText("Add");
		btnAddRemove1.setEnabled(false);
		btnAddRemove2.setEnabled(false);
	}
	protected void okPressed(){

		if (lstTestVariables.getItemCount() >= 1) {
			btnOkay.setEnabled(false);
			String[] respvars = lstTestVariables.getItems();
			float levelSig = (float) txtLevelOfSig.getSelection() / 100;
			String grp = txtGroupingVariable.getText();
			String altHypo = cmbAlternativeHypothesis.getText();
			boolean statistics = btnSummaryStatistics.getSelection();
			boolean confInt = btnConfidenceInterval.getSelection();
			float confLevel = (float) txtConfidenceInterval.getSelection() / 100;
			Composite[] cmpGroup = { grpTestForNormality };
			String[] method = listManager.getCheckBoxesValue(cmpGroup);
			String outputFolder = StarAnalysisUtilities
					.createOutputFolder(filePath,"TTestTwoIndependentSample");
			String dataFileName = filePath.replace(File.separator, "/");
			//supply path and name of text file where text output is going to be saved
			String outFileName = outputFolder + File.separator + "Output.txt";
			StarAnalysisUtilities.testVarArgs(dataFileName, outFileName.replace(File.separator, "/"), respvars, grp, altHypo, levelSig, statistics, confInt, confLevel, method);
			ProjectExplorerView.rJavaManager.getSTARAnalysisManager()
					.doIndependentMean(dataFileName, outFileName.replace(File.separator, "/"), respvars, grp, altHypo, levelSig, statistics, confInt, confLevel, method);
			this.getShell().setMinimized(true);
			StarAnalysisUtilities.openAndRefreshFolder(outFileName);
			
			btnOkay.setEnabled(true);
		}
		
	}

	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.RETRY_ID, "Reset", false);
		btnOkay = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(482, 449);
	}

}
