package org.irri.breedingtool.datamanipulation.dialog;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.layout.GridData;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.List;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.application.model.ProjectExplorerTreeNodeModel;
import org.irri.breedingtool.manager.impl.DataManipulationManager;
import org.irri.breedingtool.manager.impl.ProjectExplorerManager;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.rjava.manager.RJavaManager;

public class MergeDialog extends Dialog {
	private String delimiter[] = {",", " ", "\t", ";"};
	private String separator = "NULL";
	private int fileFormat= 1;
	private String dataFileName;
	String observationsToInclude[]={"common observations", "all observations in the active data", "all observations in the transaction data", "all observations"};
	String delimiterList[]={"comma", "space", "tab", "semicolon"};
	private Combo delimiterCombo;
	private CCombo transactionFileNameCombo;
	private List transactionDataList;
	private List activeDataList;
	private List keyVariableList;
	private List othersList;
	private ArrayList<String> keyVariablesMasterList = new ArrayList<String>();
	private ArrayList<String> keyVariablesTransactList = new ArrayList<String>();
	private ArrayList<String> otherVariablesMasterList = new ArrayList<String>();
	private ArrayList<String> otherVariablesTransactList = new ArrayList<String>();
	private DataManipulationManager dataManipulationManager = new DataManipulationManager();
	private Combo observationsCombo;
	private String transactionFileName;
	private String transactionName;
	private ProjectExplorerManager projExpMan;
	private Button addBtn;
	private Button pairBtn;
	private ProjectExplorerTreeNodeModel fileModel;

	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public MergeDialog(Shell parentShell, ProjectExplorerTreeNodeModel fileModel) {
		super(parentShell);
		this.fileModel = fileModel;
		projExpMan =  new ProjectExplorerManager();
	}

	/**
	 * Create contents of the dialog.
	 * @param parent
	 */

	@Override
	protected Control createDialogArea(Composite parent) {
		parent.getShell().setText("Merge Data: "+dataManipulationManager.getDisplayFileName(fileModel.getProjectFile().getAbsolutePath()));
		Composite container = (Composite) super.createDialogArea(parent);
		dataFileName = fileModel.getProjectFile().getAbsolutePath();
		Group group = new Group(container, SWT.NONE);
		group.setLayout(new GridLayout(4, false));
		GridData gd_group = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_group.heightHint = 97;
		gd_group.widthHint = 425;
		group.setLayoutData(gd_group);

		Label lblNewLabel = new Label(group, SWT.NONE);
		lblNewLabel.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, false, false, 1, 1));
		lblNewLabel.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));
		lblNewLabel.setText("Transaction Data File Name:");
		new Label(group, SWT.NONE);

		transactionFileNameCombo = new CCombo(group, SWT.BORDER);
		transactionFileNameCombo.setEditable(false);
		transactionFileNameCombo.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		transactionFileNameCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));
		transactionFileNameCombo.setItems(dataManipulationManager.getFilesFromDir(fileModel));
		transactionFileNameCombo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e){
				delimiterCombo.select(-1);
				resetList();
				transactionFileName = fileModel.getProjectFile().getParentFile().getAbsolutePath()+System.getProperty("file.separator")+transactionFileNameCombo.getText();
				
				if(transactionFileName.endsWith(".txt")){
				String tmpFile = transactionFileName.replaceAll(".txt", "_varinfo.tmp");
				projExpMan.deleteFile(tmpFile);
				}
				setTransactionDataFromFile(transactionFileName);
			}
			@Override
			public void widgetDefaultSelected(SelectionEvent e){
				// TODO Auto-generated method stub
			}
		});
		Button btnBrowse = new Button(group, SWT.NONE);
		btnBrowse.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				FileDialog fd;
				fd = new FileDialog(getShell(), SWT.OPEN);
				fd.setText("Choose File Input");
				ProjectExplorerManager projectExplorerManger = new ProjectExplorerManager();
				fd.setFilterPath(((ProjectExplorerTreeNodeModel)projectExplorerManger.getDataFolder(ProjectExplorerView.projectTree).getData()).getProjectFile().getAbsolutePath());
				String[] filterExt = {"*.csv","*.txt"};
				fd.setFilterExtensions(filterExt);
				try{
				String selected = fd.open();
				resetList();
				delimiterCombo.setItems(delimiterList);
				transactionFileNameCombo.setText((new File(selected)).getName().toString());
				transactionFileName = selected;
				System.out.println(selected);
				setTransactionDataFromFile(selected);
				}catch(Exception ex){}
			}
		});
		btnBrowse.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		btnBrowse.setText("Browse");

		Label lblTextFileDelimeter = new Label(group, SWT.NONE);
		lblTextFileDelimeter.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, false, false, 1, 1));
		lblTextFileDelimeter.setText("Text File Delimeter:");
		lblTextFileDelimeter.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));
		new Label(group, SWT.NONE);

		delimiterCombo = new Combo(group, SWT.DROP_DOWN | SWT.READ_ONLY);
		delimiterCombo.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		delimiterCombo.setEnabled(false);
		delimiterCombo.setItems(delimiterList);
		delimiterCombo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				separator = delimiter[delimiterCombo.getSelectionIndex()];

				resetList();
//				transactionFileName = new File(transactionFileName).getAbsolutePath()+System.getProperty("file.separator")+transactionFileNameCombo.getText();
				
				String tmpFile = transactionFileName.replaceAll(".txt", "_varinfo.tmp");
				projExpMan.deleteFile(tmpFile);
				
				setTransactionDataFromFile(transactionFileName);
			}
			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
			}
		});
		new Label(group, SWT.NONE);

		Label lblObservationsToInclude = new Label(group, SWT.NONE);
		lblObservationsToInclude.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		lblObservationsToInclude.setText("Observations to Include:");
		lblObservationsToInclude.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));

		observationsCombo = new Combo(group, SWT.DROP_DOWN | SWT.READ_ONLY);
		observationsCombo.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		observationsCombo.setItems(observationsToInclude);
		observationsCombo.select(0);
		new Label(group, SWT.NONE);

		Group grpVariablesInThe = new Group(container, SWT.NONE);
		grpVariablesInThe.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));
		grpVariablesInThe.setText("Variables in the...");
		grpVariablesInThe.setLayout(new GridLayout(3, false));
		GridData gd_grpVariablesInThe = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 4);
		gd_grpVariablesInThe.widthHint = 429;
		gd_grpVariablesInThe.heightHint = 217;
		grpVariablesInThe.setLayoutData(gd_grpVariablesInThe);

		Label lblNewLabel_1 = new Label(grpVariablesInThe, SWT.NONE);
		lblNewLabel_1.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblNewLabel_1.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));
		lblNewLabel_1.setText("Active Data:");

		Group grpNewWokingData = new Group(grpVariablesInThe, SWT.NONE);
		GridData gd_grpNewWokingData = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 4);
		gd_grpNewWokingData.heightHint = 214;
		grpNewWokingData.setLayoutData(gd_grpNewWokingData);
		grpNewWokingData.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));
		grpNewWokingData.setText("New Woking Data File:");
		grpNewWokingData.setLayout(new GridLayout(2, false));
		new Label(grpNewWokingData, SWT.NONE);

		Label lblKeyVariables = new Label(grpNewWokingData, SWT.NONE);
		lblKeyVariables.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblKeyVariables.setText("Key Variables:");
		lblKeyVariables.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));

		pairBtn = new Button(grpNewWokingData, SWT.NONE);
		GridData gd_pairBtn = new GridData(SWT.FILL, SWT.BOTTOM, false, false, 1, 1);
		gd_pairBtn.widthHint = 71;
		pairBtn.setLayoutData(gd_pairBtn);
		pairBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				String selectedActiveVars[]= activeDataList.getSelection();
				String selectedTransactionVars[]= transactionDataList.getSelection();
				if(selectedActiveVars.length != 1 || selectedTransactionVars.length != 1){//if there's no selected or more than 1 selected active variable
					MessageDialog.openWarning(Display.getCurrent().getActiveShell(), "Wrong Variable Pairing", "Please choose one variable from the active data and one from the transaction data." );
				}
				else{
					keyVariableList.add(selectedActiveVars[0]+" & "+selectedTransactionVars[0]);
					keyVariablesMasterList.add(selectedActiveVars[0]);
					keyVariablesTransactList.add(selectedTransactionVars[0]);
					activeDataList.remove(activeDataList.getSelectionIndex());
					transactionDataList.remove(transactionDataList.getSelectionIndex());
					transactionName=transactionFileNameCombo.getText().replaceAll(".csv", "_");
					transactionName=transactionName.replaceAll(".txt", "_");
					transactionFileNameCombo.setEnabled(false);
				}
			}
		});
		pairBtn.setText("Pair");

		keyVariableList = new List(grpNewWokingData, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL );
		keyVariableList.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		new Label(grpNewWokingData, SWT.NONE);
		keyVariableList.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(activeDataList.getSelectionCount()>0) enableRemove(true);
			}
		});
		Label lblOther = new Label(grpNewWokingData, SWT.NONE);
		lblOther.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, false, 1, 1));
		lblOther.setText("Other:");
		lblOther.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));

		addBtn = new Button(grpNewWokingData, SWT.NONE);
		GridData gd_addBtn = new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1);
		gd_addBtn.widthHint = 75;
		addBtn.setLayoutData(gd_addBtn);
		addBtn.setText("Add");
		addBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(addBtn.getText().equals("Add")){
					String selectedActiveVars[]= activeDataList.getSelection();
					String selectedTransactionVars[]= transactionDataList.getSelection();
					if(selectedActiveVars.length < 1 && selectedTransactionVars.length < 1){//if there's no selected variable.
						MessageDialog.openWarning(Display.getCurrent().getActiveShell(), "Select Variables", "Please select variables from the active data or from the transaction data." );
					}
					else{
						for(int i=0; i< selectedActiveVars.length; i++){
							String selectedString = selectedActiveVars[i];
							selectedString = selectedString+"(Active)";
							othersList.add(selectedString);
							otherVariablesMasterList.add(selectedActiveVars[i]);
						}
						for(int i=0; i< selectedTransactionVars.length; i++){
							String selectedString = selectedTransactionVars[i];
							selectedString = selectedString+"(Transaction)";
							othersList.add(selectedString);
							otherVariablesTransactList.add(selectedTransactionVars[i]);
						}
						activeDataList.remove(activeDataList.getSelectionIndices());
						transactionDataList.remove(transactionDataList.getSelectionIndices());
						//transactionFileNameCombo.setEnabled(false);
					}
				}else{//if the purpose is to remove
					int selectedKeyVars[]= keyVariableList.getSelectionIndices();
					int selectedOtherVars[]= othersList.getSelectionIndices();
					
					//if there's a selected item from the paired (key) variables
					if(selectedKeyVars.length >0){
						for(int i=0; i< selectedKeyVars.length; i++){
							keyVariableList.remove(selectedKeyVars[i]);
							activeDataList.add(keyVariablesMasterList.get(selectedKeyVars[i]));
							keyVariablesMasterList.remove(selectedKeyVars[i]);
							transactionDataList.add(keyVariablesTransactList.get(selectedKeyVars[i]));
							keyVariablesTransactList.remove(selectedKeyVars[i]);
						}
					}
					
					//if there's a selected item from the list of other variables
					if(selectedOtherVars.length >0){
						for(int i=0; i< selectedOtherVars.length; i++){
							String selectedString = othersList.getItem(selectedOtherVars[i]);
							if(selectedString.endsWith("(Active)")){
								selectedString = selectedString.replaceAll("(Active)", "");
								selectedString=	selectedString.substring(0, selectedString.length()-2);
								activeDataList.add(selectedString);
								otherVariablesMasterList.remove(selectedString);
							}
							else{
								selectedString = selectedString.replaceAll("(Transaction)", "");
								selectedString = selectedString.substring(0, selectedString.length()-2);
								transactionDataList.add(selectedString);
								otherVariablesTransactList.remove(selectedString);
							}
							System.out.println("selected String :"+selectedString);
							othersList.remove(selectedOtherVars[i]);
						}
					}
				}
			}
		});

		othersList = new List(grpNewWokingData, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL );
		othersList.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		othersList.addListener(SWT.MouseDown, new Listener() {
			@Override
			public void handleEvent(Event event) {
				// TODO Auto-generated method stub
					if(othersList.getSelectionCount()>0)enableRemove(true);
			}
		});
		
		
		activeDataList = new List(grpVariablesInThe, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL  | SWT.MULTI);
		GridData gd_activeDataList = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_activeDataList.heightHint = 95;
		activeDataList.setLayoutData(gd_activeDataList);
		ArrayList<String> s= dataManipulationManager.getVarInfoFromFile(dataFileName);
		activeDataList.setItems(dataManipulationManager.getListItems(s));
		activeDataList.addListener(SWT.MouseDown, new Listener() {
			@Override
			public void handleEvent(Event event) {
				// TODO Auto-generated method stub
				enableRemove(false);
			}
		});
		
		Label lblTransactionData = new Label(grpVariablesInThe, SWT.NONE);
		lblTransactionData.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblTransactionData.setText("Transaction Data:");
		lblTransactionData.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));

		transactionDataList = new List(grpVariablesInThe, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_transactionDataList = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_transactionDataList.heightHint = 95;
		transactionDataList.setLayoutData(gd_transactionDataList);
		transactionDataList.addListener(SWT.MouseDown, new Listener() {
			@Override
			public void handleEvent(Event event) {
				// TODO Auto-generated method stub
				if(transactionDataList.getItemCount()<1){
					if(!transactionFileNameCombo.getText().isEmpty()) MessageDialog.openWarning(getShell(), "Empty Transaction File", "Please choose a different transaction file.");
					else MessageDialog.openWarning(getShell(), "Transaction File", "Please choose a transaction file first.");
				}
				else if(transactionDataList.getItemCount()>0 && delimiterCombo.getText().isEmpty() && delimiterCombo.getEnabled()){
					MessageDialog.openWarning(getShell(), "Transaction File", "Please choose a the proper delimiter for your selected .txt transaction file.");
				}
				else{
					enableRemove(false);
				}
			}
		});
		return container;
	}

	protected void enableRemove(boolean state) {
		// TODO Auto-generated method stub

		pairBtn.setEnabled(!state);
		if(state){
			addBtn.setText("Remove");
			activeDataList.setSelection(-1);
			transactionDataList.setSelection(-1);
		}
		else{
			addBtn.setText("Add");
			keyVariableList.setSelection(-1);
			othersList.setSelection(-1);
		}
	}

	protected void resetList() {
		// TODO Auto-generated method stub
		
		//remove all variable contents from the box lists
		transactionDataList.removeAll();
		keyVariableList.removeAll();
		othersList.removeAll();
		activeDataList.removeAll();

		keyVariablesMasterList.clear();
		keyVariablesTransactList.clear();
		otherVariablesMasterList.clear();
		otherVariablesTransactList.clear();
		
		//re-initialize active data variables
		ArrayList<String> s= dataManipulationManager.getVarInfoFromFile(fileModel.getProjectFile().getAbsolutePath());
		activeDataList.setItems(dataManipulationManager.getListItems(s));
	}

	protected void setTransactionDataFromFile(String transactionFileName2) {
		// TODO Auto-generated method stub
		ArrayList<String> s = null;
		int format = 1;
		String tmpFile="";
		transactionFileName = transactionFileName2;
	
		if(transactionFileName2.endsWith(".txt")){
			delimiterCombo.setEnabled(true);
			tmpFile = transactionFileName2.replaceAll(".txt", "_varinfo.tmp");
			format = 2;
			//			separator = delimiter[delimiterCombo.getSelectionIndex()];
		}
		else{// if the user selected a .csv file
			delimiterCombo.select(0);//change the delimiter to comma
			delimiterCombo.setEnabled(false);
			tmpFile = transactionFileName2.replaceAll(".csv", "_varinfo.tmp");
		}

		if(delimiterCombo.getSelectionIndex()>=0){//if there's a delimiter selected
			try{
				Scanner newScanner = new Scanner(new File(tmpFile));
				s=dataManipulationManager.getVarInfoFromFile(transactionFileName2);
				System.out.println("somehow, "+ tmpFile +" still exists");
				newScanner.close();
			}catch(FileNotFoundException npe){
				System.out.println("filenotFound");
				String rJavaTmpFile = tmpFile.replaceAll("\\\\","/");
				String dataFile = transactionFileName2.replaceAll("\\\\","/");
				s=ProjectExplorerView.rJavaManager.getRJavaDataManipulationManager().getVariableInfo(dataFile, rJavaTmpFile, format, separator);
			}
//			String rJavaTmpFile = tmpFile.replaceAll("\\\\","/");
//			String dataFile = transactionFileName2.replaceAll("\\\\","/");
//			s=ProjectExplorerView.rJavaManager.getRJavaDataManipulationManager().getVariableInfo(dataFile, rJavaTmpFile, format, separator);
			transactionDataList.setItems(dataManipulationManager.getListItems(s));
		
		}
	}

	@Override
	protected void okPressed(){
		if(keyVariableList.getItemCount()<1){
			MessageDialog.openWarning(Display.getCurrent().getActiveShell(), "Select Variables", "Please pair variables from the active data and transaction data." );
		}
//		else if(othersList.getItemCount()<1){
//			MessageDialog.openWarning(Display.getCurrent().getActiveShell(), "Select Variables", "Please select other variables from the active data or from the transaction data." );	
//		}
		else{
			String[] keyVariablesMaster= keyVariablesMasterList.toArray(new String[keyVariablesMasterList.size()]);
			String[] keyVariablesTransact=keyVariablesTransactList.toArray(new String[keyVariablesTransactList.size()]);
			String[] otherVariablesMaster=otherVariablesMasterList.toArray(new String[otherVariablesMasterList.size()]);
			String[] otherVariablesTransact=otherVariablesTransactList.toArray(new String[otherVariablesTransactList.size()]);
			int option=observationsCombo.getSelectionIndex();
			String tmptransactionFileName="";
			
//			if(othersList.getItemCount()<1){
//				MessageDialog.openWarning(Display.getCurrent().getActiveShell(), "Select Variables", "Please select other variables from the active data or from the transaction data." );	
//			}
			
			if(transactionFileName.endsWith(".txt")){//if txtFile was chosen as a transactionFileName
				tmptransactionFileName = transactionFileName.replaceAll(".txt", "_tmpFile.csv");
				dataManipulationManager.convertTxtToCsv(transactionFileName, tmptransactionFileName, separator);
				transactionFileName = tmptransactionFileName.replaceAll("\\\\+", "/");
			}
			else {
				tmptransactionFileName = transactionFileName;
				transactionFileName = tmptransactionFileName.replaceAll("\\\\+", "/");
			}

			dataFileName = fileModel.getProjectFile().getAbsolutePath().toString().replaceAll("\\\\+", "/");
			String fileNameExtension = dataManipulationManager.getManipulatedFileNameExtension("_"+transactionName+"_merge", fileModel.getProjectFile().getAbsolutePath());
			String newFileName = dataFileName.replaceAll(".csv", fileNameExtension);
			newFileName = newFileName.replaceAll(".txt", "_"+transactionName+"_merge.csv");
			ProjectExplorerView.rJavaManager.getRJavaDataManipulationManager().mergeData(dataFileName, transactionFileName, newFileName, keyVariablesMaster, keyVariablesTransact, otherVariablesMaster, otherVariablesTransact, option);
			if(tmptransactionFileName.endsWith("_tmpFile.csv"))projExpMan.deleteFile(tmptransactionFileName);
			
			close();
			
			String newFile=fileModel.getProjectFile().getName().replaceAll(".csv",fileNameExtension);
			
			TreeItem sortedTree = projExpMan.getTreeNodeByName(fileModel.getParentTreeItem(), newFile);

			try{
				if(((ProjectExplorerTreeNodeModel) sortedTree.getData()).getElementInStack() == null){//if the filename created hasn't been opened
					PartStackHandler.execute(projExpMan.createNewProjectExplorerModel((ProjectExplorerTreeNodeModel) fileModel.getParentTreeItem().getData(), newFile));
				}
				else{//re-open file
					PartStackHandler.reOpenPart((ProjectExplorerTreeNodeModel) sortedTree.getData());
				}
			}catch(NullPointerException npe){
				MessageDialog.openWarning(Display.getCurrent().getActiveShell(), "Merge was Unsuccessful", "Failed to create merged file.\n\n" +
						"Are you sure you specified the correct delimiter and/or variables?" );
			}
		}
	}

	@Override
	protected void buttonPressed(int buttonId) { //when Reset button is pressed
		if (buttonId == IDialogConstants.DESELECT_ALL_ID) {
			transactionFileNameCombo.setEnabled(true);
			transactionFileNameCombo.setItems(dataManipulationManager.getFilesFromDir(fileModel));
			delimiterCombo.setItems(delimiterList);
			delimiterCombo.setEnabled(false);
			resetList();
		}
		super.buttonPressed(buttonId);
	}

	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.DESELECT_ALL_ID, "Reset", true);
		createButton(parent, IDialogConstants.OK_ID, "Ok",
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(729, 489);
	}

	@Override
	protected boolean isResizable(){
		return true;
	}

}
