package org.irri.breedingtool.star.analysis.dialog;

import java.io.File;
import java.util.ArrayList;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Spinner;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.DialogFormUtility;
import org.irri.breedingtool.utility.StarAnalysisUtilities;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;

public class NonLinearRegressionAnalysisParameters extends Dialog {

	private Button btnOk;
	private String filePath = PartStackHandler.getActiveElementID();
	private DialogFormUtility listManager = new DialogFormUtility();
	private ArrayList<String> tableData = new ArrayList<String>();
	private Composite composite;
	private Label lblStartingValue;
	private List lstName;
	private Button btnAdd;
	private Table table;
	private TableColumn tableColumn;
	private TableColumn tableColumn_1;
	private Label lblName;
	private List lstStartingValue;
	private Label lblSummary;
	private Button btnEdit;
	private Button btnDelete;
	private Label lblNewLabel;
	private Label label;
	private Label lblNewLabel_1;
	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	private String returnVal;
		public String getReturnVal() {
			return returnVal;
		}
		public void setReturnVal(String returnVal) {
			this.returnVal = returnVal;
		}
	public NonLinearRegressionAnalysisParameters(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.RESIZE);
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Nonlinear Regression: Parameters");
	}

	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		FillLayout fl_container = new FillLayout(SWT.HORIZONTAL);
		fl_container.marginHeight = 8;
		fl_container.marginWidth = 8;
		container.setLayout(fl_container);
		
		composite = new Composite(container, SWT.NONE);
		composite.setLayout(new GridLayout(6, false));
		
		lblNewLabel = new Label(composite, SWT.NONE);
		GridData gd_lblNewLabel = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_lblNewLabel.widthHint = 10;
		lblNewLabel.setLayoutData(gd_lblNewLabel);
		
		lblName = new Label(composite, SWT.NONE);
		lblName.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblName.setText("Name:");
		
		lstName = new List(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_lstName = new GridData(SWT.FILL, SWT.FILL, true, false, 3, 1);
		gd_lstName.heightHint = 5;
		gd_lstName.widthHint = 128;
		lstName.setLayoutData(gd_lstName);
		
		label = new Label(composite, SWT.NONE);
		GridData gd_label = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label.widthHint = 10;
		label.setLayoutData(gd_label);
		new Label(composite, SWT.NONE);
		
		lblStartingValue = new Label(composite, SWT.NONE);
		lblStartingValue.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblStartingValue.setText("Starting Value:");
		
		lstStartingValue = new List(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_lstStartingValue = new GridData(SWT.FILL, SWT.FILL, true, false, 3, 1);
		gd_lstStartingValue.heightHint = 5;
		gd_lstStartingValue.widthHint = 128;
		lstStartingValue.setLayoutData(gd_lstStartingValue);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		lblNewLabel_1 = new Label(composite, SWT.NONE);
		GridData gd_lblNewLabel_1 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_lblNewLabel_1.widthHint = 15;
		lblNewLabel_1.setLayoutData(gd_lblNewLabel_1);
		
		btnAdd = new Button(composite, SWT.NONE);
		GridData gd_btnAdd = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_btnAdd.widthHint = 70;
		btnAdd.setLayoutData(gd_btnAdd);
		btnAdd.setText("Add");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		lblSummary = new Label(composite, SWT.NONE);
		lblSummary.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblSummary.setText("Summary:");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		table = new Table(composite, SWT.BORDER | SWT.FULL_SELECTION);
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		GridData gd_table = new GridData(SWT.FILL, SWT.FILL, true, true, 4, 1);
		gd_table.heightHint = 66;
		gd_table.widthHint = 214;
		table.setLayoutData(gd_table);
		
		tableColumn = new TableColumn(table, SWT.NONE);
		tableColumn.setWidth(119);
		tableColumn.setText("Name");
		
		tableColumn_1 = new TableColumn(table, SWT.NONE);
		tableColumn_1.setWidth(111);
		tableColumn_1.setText("Starting Value");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		btnEdit = new Button(composite, SWT.NONE);
		GridData gd_btnEdit = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_btnEdit.widthHint = 77;
		btnEdit.setLayoutData(gd_btnEdit);
		btnEdit.setText("Edit");
		new Label(composite, SWT.NONE);
		
		btnDelete = new Button(composite, SWT.NONE);
		GridData gd_btnDelete = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_btnDelete.widthHint = 70;
		btnDelete.setLayoutData(gd_btnDelete);
		btnDelete.setText("Delete");
		new Label(composite, SWT.NONE);
//		listManager.initializeSingleButtonList(lstAvailableData, lstDependentVariables, btnAddDependentVariable);
//		listManager.initializeSingleButtonList(lstAvailableData, lstIndependentVariables, btnAddIndependentVariable);
//
//		
//		listManager.initializeNumericList(lstAvailableData, filePath);
		
		return container;
	}
@Override
	protected void buttonPressed(int buttonID){
		if(buttonID == IDialogConstants.OK_ID) okPressed();
		else if(buttonID == IDialogConstants.RETRY_ID){
//			listManager.setCheckBoxesToBoolean(new Composite[]{grpDisplay,grpSave,grpNormalityTest,grpTestForHeteroskedasticity}, false);
//			btnCoefficientInterval.setSelection(selected)(false);
//			btnCovarienceMatrix.setEnabled(true);
//			btnIncludeConstantEquation.setSelection(true);
//			txtConfidenceInterval.setSelection(95);
//			lstAvailableData.removeAll();
//			lstDependentVariables.removeAll();
//			lstIndependentVariables.removeAll();
//			listManager.initializeNumericList(lstAvailableData, filePath);
//			txtConfidenceInterval.setEnabled(false);
			
		}
		else this.close();
	}
	
protected void	okPressed(){
	
	btnOk.setEnabled(false);
	

	String outputFolder = StarAnalysisUtilities.createOutputFolder(filePath,"NonLinearRegression") + "\\";
	
//	ProjectExplorerView.rJavaManager.getSTARAnalysisManager().doLinearReg(			
//			filePath.replace("\\", "/"),
//			outputFolder.replace("\\", "/") ,
//			lstDependentVariables.getItems(), 
//			lstIndependentVariables.getItems(),
//			btnIncludeConstantEquation.getSelection(),
//			btnCoefficientInterval.getSelection(),
//			txtConfidenceInterval.getSelection(),
//			btnCovarienceMatrix.getSelection(),
//			btnVarianceInflationFactors.getSelection(),
//			btnDurbinwatson.getSelection(),
//			listManager.getCheckBoxesValue(btnBreuschpagar,btnGoldfeldquandt),
//			listManager.getCheckBoxesValue(grpNormalityTest),
//			btnCooksDistance.getSelection(),
//			btnLeverageValues.getSelection());
	
		setReturnVal("Ahtg");
		close();
		
	

	}
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.RETRY_ID, "Reset", false);
		btnOk = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(360, 412);
	}
}
