package org.irri.breedingtool.utility;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.FocusListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Text;
import org.irri.breedingtool.manager.impl.DataManipulationManager;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;

public class DialogFormUtility {

	private final String SET_TO_NUMERIC = "Set to Numeric";
	private final String SET_TO_FACTOR = "Set to Factor";

	public int getVariableLevels(String filePath, String variableName){

		DataManipulationManager dataMan = new DataManipulationManager();
		return dataMan.getEnvtLevels(variableName, new File(filePath)).length;

	}
	public void setCheckBoxesToBoolean(boolean value, Composite... composites ){
		for(Composite sets: composites)
		{
			for(int i = 0; i < sets.getChildren().length; i++){
				if( sets.getChildren()[i] instanceof Button){
					((Button) sets.getChildren()[i]).setSelection(value);

				}
				else if(sets.getChildren()[i] instanceof Composite){
					setCheckBoxesToBoolean(value, (Composite) sets.getChildren()[i]);
				}
			}

		}
	}
	public void initializeList(final List lstFrom, final List lstTo, final Button btnAdd, final Button btnRemove ){



		btnAdd.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				exchangeList(lstFrom, lstTo);
			}
		});

		btnRemove.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				exchangeList(lstTo, lstFrom);
			}
		});



	}

	public void initializeVariableMoveList(final List lstNumericVariables, final List lstFactorVariables, final Button btnMove, final String filePath){

		lstNumericVariables.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				btnMove.setText(SET_TO_FACTOR);
				lstFactorVariables.setSelection(-1);
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				btnMove.setText(SET_TO_FACTOR);
				lstFactorVariables.setSelection(-1);
			}

		});


		lstFactorVariables.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				btnMove.setText(SET_TO_NUMERIC);
				lstNumericVariables.setSelection(-1);

			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				btnMove.setText(SET_TO_NUMERIC);
				lstNumericVariables.setSelection(-1);
			}

		});

		btnMove.addSelectionListener(new SelectionAdapter(){
			private DataManipulationManager dataManipulationManager = new DataManipulationManager();

			@Override
			public void widgetSelected(SelectionEvent e) {
				DataManipulationManager dataMan = new DataManipulationManager();

				if(btnMove.getText().equals(SET_TO_FACTOR)){
					//to factor
					for(int i = 0; i < lstNumericVariables.getSelectionCount(); i++){
						dataMan.editVariableType(filePath, dataMan.getVarInfoFromFile(filePath), lstNumericVariables.getSelection()[i] , "Factor");
					}
					exchangeList(lstNumericVariables, lstFactorVariables);

				}else if(btnMove.getText().equals(SET_TO_NUMERIC)){
					//to numeric
					ArrayList<String> toNumericData = new ArrayList<String>();

					for(int i = lstFactorVariables.getSelectionCount() - 1; i >= 0; i--){
						String isNumeric = dataManipulationManager .isNumeric(filePath.replaceAll("\\\\","/"), lstFactorVariables.getSelection()[i]);
						if(isNumeric.equals("TRUE")){
							dataMan.editVariableType(filePath, dataMan.getVarInfoFromFile(filePath), lstFactorVariables.getSelection()[i] , "Numeric");
							//							toNumericData.add(lstFactorVariables.getSelection()[i]);
							//							lstFactorVariables.remove(lstFactorVariables.getSelectionIndices()[i]);

						}
						else{
							lstFactorVariables.deselect(lstFactorVariables.getSelectionIndices()[i]);
						}
					}
					exchangeList(lstFactorVariables,lstNumericVariables);

					//					Collections.reverse(toNumericData);
					//					for(int i = 0; i < toNumericData.size(); i++){
					//						
					//					}

				}

			}
		});

	}

	public void initializeVariableMoveList(final List lstNumericVariables, final List lstFactorVariables, final Button btnMove, final String filePath, final int factorLevel){

		lstNumericVariables.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				btnMove.setText(SET_TO_FACTOR);
				lstFactorVariables.setSelection(-1);
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				btnMove.setText(SET_TO_FACTOR);
				lstFactorVariables.setSelection(-1);
			}

		});


		lstFactorVariables.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				btnMove.setText(SET_TO_NUMERIC);

			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
				btnMove.setText(SET_TO_NUMERIC);
			}

		});

		btnMove.addSelectionListener(new SelectionAdapter(){
			private DataManipulationManager dataManipulationManager = new DataManipulationManager();

			@Override
			public void widgetSelected(SelectionEvent e) {
				DataManipulationManager dataMan = new DataManipulationManager();

				if(btnMove.getText().equals(SET_TO_FACTOR)){
					//to factor
					for(int i = 0; i < lstNumericVariables.getSelectionCount(); i++){
						if(StarAnalysisUtilities.getTotalVariableLevels(lstNumericVariables.getSelection()[i], filePath) != factorLevel){
							MessageDialog.openError(Display.getCurrent().getActiveShell(), "Convering variable error", "Could not move variable " + lstNumericVariables.getSelection()[i] + "  to factor. FactorLevel must be equal to (" +  factorLevel + ")");
							return;
						}
						dataMan.editVariableType(filePath, dataMan.getVarInfoFromFile(filePath), lstNumericVariables.getSelection()[i] , "Factor");

					}
					exchangeList(lstNumericVariables, lstFactorVariables);

				}else if(btnMove.getText().equals(SET_TO_NUMERIC)){
					//to numeric
					for(int i = 0; i < lstFactorVariables.getSelectionCount(); i++){
						String isNumeric = dataManipulationManager .isNumeric(filePath.replaceAll("\\\\","/"), lstFactorVariables.getSelection()[i]);
						if(isNumeric.equals("TRUE")){
							dataMan.editVariableType(filePath, dataMan.getVarInfoFromFile(filePath), lstFactorVariables.getSelection()[i] , "Numeric");
							//							toNumericData.add(lstFactorVariables.getSelection()[i]);
							//							lstFactorVariables.remove(lstFactorVariables.getSelectionIndices()[i]);

						}
						else{
							lstFactorVariables.deselect(lstFactorVariables.getSelectionIndices()[i]);
						}
					}
					exchangeList(lstFactorVariables,lstNumericVariables);
				}

			}
		});

	}

	public void initializeSingleButtonList(final List lstFrom, final List lstTo, final Button btnAddRemove){


		//TODO: Must refactor 

		btnAddRemove.setEnabled(false);
		lstFrom.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				if(lstFrom.getSelectionCount()>0){
					lstTo.setSelection(-1);
					btnAddRemove.setText("Add");
					btnAddRemove.setEnabled(true);
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				if(lstFrom.getSelectionCount()>0){
					lstTo.setSelection(-1);
					btnAddRemove.setText("Add");
					btnAddRemove.setEnabled(true);
				}
			}

		});

		lstTo.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				if(lstTo.getSelectionCount()>0){
					lstFrom.setSelection(-1);
					btnAddRemove.setText("Remove");
					btnAddRemove.setEnabled(true);
				}

			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				if(lstTo.getSelectionCount()>0){
					lstFrom.setSelection(-1);
					btnAddRemove.setText("Remove");
					btnAddRemove.setEnabled(true);
				}
			}

		});
		btnAddRemove.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnAddRemove.getText().equals("Add") && lstFrom.getSelectionCount() > 0 ){
					exchangeList(lstFrom,lstTo);
				}
				if(btnAddRemove.getText().equals("Remove") && lstTo.getSelectionCount() > 0 ){
					exchangeList(lstTo,lstFrom);
				}
				btnAddRemove.setEnabled(false);
			}
		});
		
		lstFrom.addMouseListener(new MouseListener(){

			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				exchangeList(lstFrom,lstTo);
				btnAddRemove.setEnabled(false);
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}});
		
		lstTo.addMouseListener(new MouseListener(){

			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				exchangeList(lstTo,lstFrom);
				btnAddRemove.setEnabled(false);
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}

		});


	}
	public void initializeSingleSelectionList(final List lstFrom, final Text txtTo, final Button btnAddRemove){

		btnAddRemove.setEnabled(false);
		lstFrom.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				if(lstFrom.getSelectionCount()>0){
					if(!btnAddRemove.getText().equals("Remove")){
						btnAddRemove.setText("Add");
						btnAddRemove.setEnabled(true);

					}
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				if(lstFrom.getSelectionCount()>0){

					if(!btnAddRemove.getText().equals("Remove")){
						btnAddRemove.setText("Add");
						btnAddRemove.setEnabled(true);

					}
				}
			}

		});

		btnAddRemove.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				if(btnAddRemove.getText().equals("Add") && lstFrom.getSelectionCount() > 0 ){
					txtTo.setText(lstFrom.getSelection()[0]);
					txtTo.setData(lstFrom.getSelectionIndices()[0]);
					lstFrom.remove(lstFrom.getSelectionIndex());

					btnAddRemove.setText("Remove");
					lstFrom.deselectAll();
				}
				else if (btnAddRemove.getText().equals("Remove") && !txtTo.getText().equals("")){
					try {
						lstFrom.add(txtTo.getText(), (Integer) txtTo.getData());
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						lstFrom.add(txtTo.getText());
					}
					btnAddRemove.setEnabled(false);
					txtTo.setText("");
					btnAddRemove.setText("Add");
				}
			}
		});

	}

	public void initializeSingleSelectionList(final List lstFrom, final Text txtTo, final Button btnAddRemove, final DialogListValidator lstValidator){

		btnAddRemove.setEnabled(false);
		lstFrom.addSelectionListener(new SelectionListener(){

			@Override
			public void widgetSelected(SelectionEvent e) {
				if(lstFrom.getSelectionCount()>0 && lstValidator.validate()){

					if(txtTo.getText().isEmpty()){
						btnAddRemove.setText("Add");
						btnAddRemove.setEnabled(true);
					}
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				if(lstFrom.getSelectionCount()>0 && lstValidator.validate()){

					if(txtTo.getText().isEmpty()){
						btnAddRemove.setText("Add");
						btnAddRemove.setEnabled(true);

					}
				}
			}

		});

		btnAddRemove.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				if(btnAddRemove.getText().equals("Add") && lstFrom.getSelectionCount() > 0 ){
					if(lstValidator.performAddProcess()){
						txtTo.setText(lstFrom.getSelection()[0]);
						txtTo.setData(lstFrom.getSelectionIndices()[0]);
						lstFrom.remove(lstFrom.getSelectionIndex());

						btnAddRemove.setText("Remove");
						lstFrom.deselectAll();
					}
				}
				else if (btnAddRemove.getText().equals("Remove") && !txtTo.getText().equals("")){
					lstValidator.performRemoveProcess();
					try {
						lstFrom.add(txtTo.getText(), (Integer) txtTo.getData());
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						lstFrom.add(txtTo.getText());
					}
					txtTo.setText("");
					btnAddRemove.setText("Add");

				}
				btnAddRemove.setEnabled(false);
			}
		});

		txtTo.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// If an item is double-clicked from the replicate Variable List
				if(!txtTo.getText().isEmpty()){
				lstFrom.add(txtTo.getText());
				txtTo.setText("");
				btnAddRemove.setEnabled(false);
				}
			}
			@Override
			public void mouseDown(MouseEvent e) {
				// If an item is selected from the replicate Variable List
				if(!txtTo.getText().isEmpty()){
					lstFrom.setSelection(-1);
					btnAddRemove.setText("Remove");
					btnAddRemove.setEnabled(true);
				}
			}
			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub
			}
		});
	}

	public void initializeNumericList(List numericList,String filePath){
		DataManipulationManager dataManipulationManager = new DataManipulationManager();
		ArrayList<String> s = dataManipulationManager.getVarInfoFromFile(filePath);
		//ang s ay ArrayList<String>;

		for(int i = 0; i < s.size(); i++){
			if(s.get(i).toString().split(":")[1].equals("Numeric"))
				numericList.add(s.get(i).toString().split(":")[0]);
		}
	}
	public void initializeFactorList(List numericList,String filePath){
		DataManipulationManager dataManipulationManager = new DataManipulationManager();
		ArrayList<String> s = dataManipulationManager.getVarInfoFromFile(filePath);
		//ang s ay ArrayList<String>;

		for(int i = 0; i < s.size(); i++){
			if(s.get(i).toString().split(":")[1].equals("Factor"))
				numericList.add(s.get(i).toString().split(":")[0]);
		}
	}
	public void initializeVariableList(List numericList,String filePath){
		DataManipulationManager dataManipulationManager = new DataManipulationManager();
		ArrayList<String> s = dataManipulationManager.getVarInfoFromFile(filePath);
		//ang s ay ArrayList<String>;

		for(int i = 0; i < s.size(); i++){

			numericList.add(s.get(i).toString().split(":")[0]);
		}
	}

	public void initializeFactorList(List numericList,String filePath, int variableLevel){
		DataManipulationManager dataManipulationManager = new DataManipulationManager();
		ArrayList<String> s = dataManipulationManager.getVarInfoFromFile(filePath);
		//ang s ay ArrayList<String>;

		for(int i = 0; i < s.size(); i++){
			if(s.get(i).toString().split(":")[1].equals("Factor") && dataManipulationManager.getEnvtLevels(s.get(i).toString().split(":")[0], new File(filePath)).length == variableLevel)
				numericList.add(s.get(i).toString().split(":")[0]);
		}
	}

	public void exchangeList(List sourceList, List destinationList){
		for(int i = 0; i <sourceList.getSelectionCount(); i++){
			destinationList.add(sourceList.getSelection()[i]);

		}
		sourceList.remove(sourceList.getSelectionIndices());
	}

	public void setCheckBoxesToBoolean(Composite[] composite,boolean value){

		for(int x = 0; x < composite.length; x++){

			for(int i = 0 ; i < composite[x].getChildren().length; i++){
				((Button) composite[x].getChildren()[i]).setSelection(value);
			}
		}
	}

	public void setEventCheckBoxes(Composite[] composite,SelectionAdapter eventListener){
		for(int x = 0; x < composite.length; x++){
			for(int i = 0 ; i < composite[x].getChildren().length; i++){
				((Button) composite[x].getChildren()[i]).addSelectionListener(eventListener);
			}
		}
	}
	public boolean isCheckBoxesHasBoolean(Composite[] composite){
		for(int x = 0; x < composite.length; x++){
			for(int i = 0 ; i < composite[x].getChildren().length; i++){
				if(((Button) composite[x].getChildren()[i]).getSelection()) return true;
			}
		}
		return false;
	}

	public boolean isCheckBoxesHasBoolean(Composite composite){

		for(int i = 0 ; i < composite.getChildren().length; i++){
			if(composite.getChildren()[i] instanceof Button)if(((Button) composite.getChildren()[i]).getSelection()) return true;
			else if(composite.getChildren()[i] instanceof Composite){
				if(isCheckBoxesHasBoolean((Composite) composite.getChildren()[i])) return true;
			}
		}

		return false;
	}
	public String[] getCheckBoxesValue(Button... CheckBoxes){
		ArrayList<String> returnValue = new ArrayList<String>();

		for(Button cBoxes: CheckBoxes){
			if(cBoxes.getSelection()) returnValue.add((String) cBoxes.getData());
		}


		return returnValue.toArray(new String[returnValue.size()]);

	}
	public String[] getCheckBoxesValue(Composite[] composite){
		ArrayList<String> lstData = new ArrayList<String>();

		for(int x = 0; x < composite.length; x++){
			for(int i = 0 ; i < composite[x].getChildren().length; i++){
				if(((Button) composite[x].getChildren()[i]).getSelection())
				{
					String data = (String) ((Button) composite[x].getChildren()[i]).getData();
					lstData.add(data);
				}
			}
		}
		return lstData.toArray(new String[lstData.size()]);
	}
	public String[] getCheckBoxesValue(Composite composite) {
		ArrayList<String> lstData = new ArrayList<String>();
		for(int i = 0 ; i < composite.getChildren().length; i++){
			if(((Button) composite.getChildren()[i]).getSelection())
			{
				String data = (String) ((Button) composite.getChildren()[i]).getData();
				lstData.add(data);
			}
		}
		return lstData.toArray(new String[lstData.size()]);
	}
}
