package org.irri.breedingtool.star.design.dialog;

import java.io.File;
import java.util.ArrayList;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.StarRandomizationUtilities;
import org.eclipse.swt.widgets.Combo;

public class StripSplitSplitPlotDesignDialog extends Dialog {
	private Text txtVerticalFactorName;
	private Text txtVerticalFactorID;
	private Text txtHorizontalFactorName;
	private Text txtHorizontalFactorID;
	private Text txtSubPlotFactorName;
	private Text txtSubPlotFactorID;
	private Text txtSubSubPlotFactorName;
	private Text txtSubSubPlotFactorID;
	private Spinner txtVerticalFactorLevels;
	private Spinner txtHorizontalFactorLevels;
	private Spinner txtSubPlotFactorLevels;
	private Spinner txtSubSubPlotFactorLevels;
	private Spinner txtTotalBlocks;
	private Spinner txtTotalTrials;
	private Text txtFileName;
	private Spinner txtRows;
	private Spinner txtRowsPerSub;
	private Spinner txtFieldRows;
	private Combo cmbOrder;
	private Button btnOk;
	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public StripSplitSplitPlotDesignDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.RESIZE);
	
		
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Randomization and Layout");
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		Label lblFactorialDesign = new Label(container, SWT.NONE);
		lblFactorialDesign.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblFactorialDesign.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.BOLD));
		lblFactorialDesign.setText("Strip-Split-Split Plot Design");
		
		Label label = new Label(container, SWT.SEPARATOR | SWT.HORIZONTAL);
		label.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		
		Group grpDesignParameters = new Group(container, SWT.NONE);
		grpDesignParameters.setLayout(new GridLayout(1, false));
		GridData gd_grpDesignParameters = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_grpDesignParameters.heightHint = 299;
		grpDesignParameters.setLayoutData(gd_grpDesignParameters);
		
		Group group = new Group(grpDesignParameters, SWT.NONE);
		group.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));
		group.setText("Factor Definition:");
		group.setLayout(new GridLayout(4, false));
		
		Label label_1 = new Label(group, SWT.NONE);
		label_1.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		label_1.setText("Factor");
		label_1.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_2 = new Label(group, SWT.NONE);
		label_2.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));
		label_2.setText("Name");
		label_2.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_3 = new Label(group, SWT.NONE);
		label_3.setText("Factor ID");
		label_3.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_4 = new Label(group, SWT.NONE);
		label_4.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, false, 1, 1));
		label_4.setText("Levels");
		label_4.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_5 = new Label(group, SWT.NONE);
		label_5.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		label_5.setText("Vertical ");
		label_5.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		txtVerticalFactorName = new Text(group, SWT.BORDER);
		txtVerticalFactorName.setText("vertical");
		GridData gd_txtVerticalFactorName = new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1);
		gd_txtVerticalFactorName.widthHint = 80;
		txtVerticalFactorName.setLayoutData(gd_txtVerticalFactorName);
		
		txtVerticalFactorID = new Text(group, SWT.BORDER);
		txtVerticalFactorID.setText("A");
		GridData gd_txtVerticalFactorID = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtVerticalFactorID.widthHint = 50;
		txtVerticalFactorID.setLayoutData(gd_txtVerticalFactorID);
		
		txtVerticalFactorLevels = new Spinner(group, SWT.BORDER);
		GridData gd_txtVerticalFactorLevels = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_txtVerticalFactorLevels.widthHint = 20;
		txtVerticalFactorLevels.setLayoutData(gd_txtVerticalFactorLevels);
		txtVerticalFactorLevels.setMaximum(500);
		txtVerticalFactorLevels.setMinimum(2);
		
		Label label_6 = new Label(group, SWT.NONE);
		label_6.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		label_6.setText("Horizontal");
		label_6.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		txtHorizontalFactorName = new Text(group, SWT.BORDER);
		txtHorizontalFactorName.setText("horizontal");
		GridData gd_txtHorizontalFactorName = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtHorizontalFactorName.widthHint = 80;
		txtHorizontalFactorName.setLayoutData(gd_txtHorizontalFactorName);
		
		txtHorizontalFactorID = new Text(group, SWT.BORDER);
		txtHorizontalFactorID.setText("B");
		GridData gd_txtHorizontalFactorID = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtHorizontalFactorID.widthHint = 50;
		txtHorizontalFactorID.setLayoutData(gd_txtHorizontalFactorID);
		
		txtHorizontalFactorLevels = new Spinner(group, SWT.BORDER);
		GridData gd_txtHorizontalFactorLevels = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtHorizontalFactorLevels.widthHint = 20;
		txtHorizontalFactorLevels.setLayoutData(gd_txtHorizontalFactorLevels);
		txtHorizontalFactorLevels.setMaximum(500);
		txtHorizontalFactorLevels.setMinimum(2);
		
		Label label_7 = new Label(group, SWT.NONE);
		label_7.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		label_7.setText("Sub Plot");
		label_7.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		txtSubPlotFactorName = new Text(group, SWT.BORDER);
		txtSubPlotFactorName.setText("sub");
		GridData gd_txtSubPlotFactorName = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtSubPlotFactorName.widthHint = 80;
		txtSubPlotFactorName.setLayoutData(gd_txtSubPlotFactorName);
		
		txtSubPlotFactorID = new Text(group, SWT.BORDER);
		txtSubPlotFactorID.setText("C");
		GridData gd_txtSubPlotFactorID = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtSubPlotFactorID.widthHint = 50;
		txtSubPlotFactorID.setLayoutData(gd_txtSubPlotFactorID);
		
		txtSubPlotFactorLevels = new Spinner(group, SWT.BORDER);
		GridData gd_txtSubPlotFactorLevels = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtSubPlotFactorLevels.widthHint = 20;
		txtSubPlotFactorLevels.setLayoutData(gd_txtSubPlotFactorLevels);
		txtSubPlotFactorLevels.setMaximum(500);
		txtSubPlotFactorLevels.setMinimum(2);
		
		Label lblSubsubPlot = new Label(group, SWT.NONE);
		lblSubsubPlot.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblSubsubPlot.setText("Sub-Sub Plot");
		lblSubsubPlot.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		txtSubSubPlotFactorName = new Text(group, SWT.BORDER);
		txtSubSubPlotFactorName.setText("ssub");
		GridData gd_txtSubSubPlotFactorName = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtSubSubPlotFactorName.widthHint = 80;
		txtSubSubPlotFactorName.setLayoutData(gd_txtSubSubPlotFactorName);
		
		txtSubSubPlotFactorID = new Text(group, SWT.BORDER);
		txtSubSubPlotFactorID.setText("D");
		GridData gd_txtSubSubPlotFactorID = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtSubSubPlotFactorID.widthHint = 50;
		txtSubSubPlotFactorID.setLayoutData(gd_txtSubSubPlotFactorID);
		
		txtSubSubPlotFactorLevels = new Spinner(group, SWT.BORDER);
		GridData gd_txtSubSubPlotFactorLevels = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtSubSubPlotFactorLevels.widthHint = 20;
		txtSubSubPlotFactorLevels.setLayoutData(gd_txtSubSubPlotFactorLevels);
		txtSubSubPlotFactorLevels.setMaximum(500);
		txtSubSubPlotFactorLevels.setMinimum(2);
		
		Composite composite = new Composite(grpDesignParameters, SWT.NONE);
		GridData gd_composite = new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1);
		gd_composite.widthHint = 60;
		composite.setLayoutData(gd_composite);
		composite.setLayout(new GridLayout(3, false));
		
		Label lblNumberOfBlocks = new Label(composite, SWT.NONE);
		lblNumberOfBlocks.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, true, 1, 1));
		lblNumberOfBlocks.setText("Number of Blocks");
		lblNumberOfBlocks.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_9 = new Label(composite, SWT.NONE);
		GridData gd_label_9 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label_9.widthHint = 10;
		label_9.setLayoutData(gd_label_9);
		
		txtTotalBlocks = new Spinner(composite, SWT.BORDER);
		GridData gd_txtTotalBlocks = new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1);
		gd_txtTotalBlocks.widthHint = 20;
		txtTotalBlocks.setLayoutData(gd_txtTotalBlocks);
		txtTotalBlocks.setMaximum(500);
		txtTotalBlocks.setMinimum(2);
		
		Label lblNumberOfPlots = new Label(composite, SWT.NONE);
		lblNumberOfPlots.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		lblNumberOfPlots.setText("Number of plots along the length of each VxH plot");
		lblNumberOfPlots.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_11 = new Label(composite, SWT.NONE);
		GridData gd_label_11 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label_11.widthHint = 10;
		label_11.setLayoutData(gd_label_11);
		
		txtRows = new Spinner(composite, SWT.BORDER);
		GridData gd_txtRows = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtRows.widthHint = 20;
		txtRows.setLayoutData(gd_txtRows);
		txtRows.setMaximum(500);
		txtRows.setMinimum(1);
		
		Label lblNumberOfRows = new Label(composite, SWT.NONE);
		lblNumberOfRows.setText("Number of plots along the length of each sub plot");
		lblNumberOfRows.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		new Label(composite, SWT.NONE);
		
		txtRowsPerSub = new Spinner(composite, SWT.BORDER);
		GridData gd_txtRowsPerSub = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtRowsPerSub.widthHint = 20;
		txtRowsPerSub.setLayoutData(gd_txtRowsPerSub);
		txtRowsPerSub.setMaximum(500);
		txtRowsPerSub.setMinimum(1);
		
		Label label_12 = new Label(composite, SWT.NONE);
		label_12.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		label_12.setText("Number of Field Rows");
		label_12.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_13 = new Label(composite, SWT.NONE);
		GridData gd_label_13 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label_13.widthHint = 10;
		label_13.setLayoutData(gd_label_13);
		
		txtFieldRows = new Spinner(composite, SWT.BORDER);
		GridData gd_txtFieldRows = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtFieldRows.widthHint = 20;
		txtFieldRows.setLayoutData(gd_txtFieldRows);
		txtFieldRows.setMaximum(500);
		txtFieldRows.setMinimum(2);
		
		Label label_14 = new Label(composite, SWT.NONE);
		label_14.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, true, 1, 1));
		label_14.setText("Number of Trials");
		label_14.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_15 = new Label(composite, SWT.NONE);
		GridData gd_label_15 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label_15.widthHint = 10;
		label_15.setLayoutData(gd_label_15);
		
		txtTotalTrials = new Spinner(composite, SWT.BORDER);
		GridData gd_txtTotalTrials = new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1);
		gd_txtTotalTrials.widthHint = 20;
		txtTotalTrials.setLayoutData(gd_txtTotalTrials);
		txtTotalTrials.setMaximum(100);
		txtTotalTrials.setMinimum(1);
		
		Group group_1 = new Group(container, SWT.NONE);
		group_1.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, true, 1, 1));
		group_1.setText("Field Book ");
		group_1.setLayout(new GridLayout(4, false));
		
		Label label_16 = new Label(group_1, SWT.NONE);
		GridData gd_label_16 = new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1);
		gd_label_16.widthHint = 40;
		label_16.setLayoutData(gd_label_16);
		label_16.setText("Name");
		
		txtFileName = new Text(group_1, SWT.BORDER);
		txtFileName.setText("fieldbookStripSplit2");
		GridData gd_txtFileName = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtFileName.widthHint = 100;
		txtFileName.setLayoutData(gd_txtFileName);
		
		Label label_18 = new Label(group_1, SWT.NONE);
		GridData gd_label_18 = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_label_18.widthHint = 40;
		label_18.setLayoutData(gd_label_18);
		label_18.setText("Order");
		
		cmbOrder = new Combo(group_1, SWT.READ_ONLY);
		cmbOrder.setItems(new String[] {"Plot Order", "Serpentine"});
		GridData gd_cmbOrder = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_cmbOrder.widthHint = 70;
		cmbOrder.setLayoutData(gd_cmbOrder);
		cmbOrder.select(0);
		
		return container;
	}
	@Override
	protected void okPressed(){  	
		ArrayList<Text> listText = new ArrayList<Text>();
		listText.add(txtVerticalFactorID);
		listText.add(txtHorizontalFactorID);
		listText.add(txtSubPlotFactorID);
		listText.add(txtSubSubPlotFactorID);
		
		if(!StarRandomizationUtilities.isTextUnique(listText)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Similar variable names detected. Make sure all the variables are unique.", SWT.NONE);
			return ; 

		}

		for(int i = 0; i < listText.size(); i++){
			if(listText.get(i) != txtFileName){
				if(!StarRandomizationUtilities.validateVariableText(listText.get(i).getText())){
					MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "'" + listText.get(i).getText() + "' is not a valid name. \nAll name fields must start with a letter and must contain:[a-z,A-Z],[_],[-] only. ", SWT.NONE);
					
					return ; 
				}
			}
		}
		
		if(txtFileName.getText().equals(""))  { 
			MessageDialog.openError(getShell(), "Validation Error", "Field Filename must not be empty."); 
			return ; 
		}

		if(!StarRandomizationUtilities.validateTextFiles(txtVerticalFactorName,txtHorizontalFactorName,txtSubPlotFactorName,txtSubSubPlotFactorName)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Fields must not be empty", SWT.ERROR);
			return;
		}
		
		if(!StarRandomizationUtilities.validateTextFiles(txtVerticalFactorID,txtHorizontalFactorID,txtSubPlotFactorID,txtSubSubPlotFactorID)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Fields must not be empty", SWT.ERROR);
			return;
		}
		
		int plot = (txtTotalBlocks.getSelection() * txtVerticalFactorLevels.getSelection() * txtHorizontalFactorLevels.getSelection() * txtSubPlotFactorLevels.getSelection() * txtSubSubPlotFactorLevels.getSelection() );
		if ((plot  % txtFieldRows.getSelection()) !=0 ){
			MessageDialog.openError(getShell(), "Validation Error", "Number of field rows must divide number of plots."); 
			return ;
		}
		
		if ((txtFieldRows.getSelection()  % (txtHorizontalFactorLevels.getSelection() * txtRows.getSelection() * txtRowsPerSub.getSelection() )) !=0 ){
			MessageDialog.openError(getShell(), "Validation Error", "Number of field rows must be divisible by the product of the levels of the horizontal, number of plots along the length of each VxH plot and number of plots along the length of each sub plot."); 
			return ;
		}
		
		if (txtRows.getSelection()> txtSubPlotFactorLevels.getSelection()){
			MessageDialog.openError(getShell(), "Validation Error", "Number of plots along the length of each VxH plot should divide the levels of the sub plot factor."); 
			return ;
		}
		
		if (txtRowsPerSub.getSelection()> txtSubSubPlotFactorLevels.getSelection()){
			MessageDialog.openError(getShell(), "Validation Error", "Number of plots along the length of each sub plot should divide the levels of the sub-sub plot factor."); 
			return ;
		}
		
		if(txtVerticalFactorID.getCharCount()>4){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must contain not more than four characters. ", SWT.ERROR);
			return;	
		}
		if(txtHorizontalFactorID.getCharCount()>4){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must contain not more than four characters. ", SWT.ERROR);
			return;	
		}
		
		if(txtSubPlotFactorID.getCharCount()>4){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must contain not more than four characters. ", SWT.ERROR);
			return;	
		}
		
		if(txtSubSubPlotFactorID.getCharCount()>4){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must contain not more than four characters. ", SWT.ERROR);
			return;	
		}
		
		OperationProgressDialog rInfo = new OperationProgressDialog(getShell(),  "Star Randomization");
		rInfo.open();
		btnOk.setEnabled(false);
	
		String outputFile = StarRandomizationUtilities.createOutputFolder("StripSplitSplitPlot");
		String outputFileTxt = outputFile;
		String outputFileCsv = txtFileName.getText();
		String fieldOrder = "Plot Order";
		if(cmbOrder.getText().equals("Serpentine")) fieldOrder = "Serpentine";
		
		Integer factorLevels[] = {txtVerticalFactorLevels.getSelection(),txtHorizontalFactorLevels.getSelection(),txtSubPlotFactorLevels.getSelection(),txtSubSubPlotFactorLevels.getSelection()};
		String factorID[] = {txtVerticalFactorID.getText(), txtHorizontalFactorID.getText(), txtSubPlotFactorID.getText(), txtSubSubPlotFactorID.getText()};

		ProjectExplorerView.rJavaManager.getSTARDesignManager().doDesignStrip(
				outputFileTxt.replace(File.separator, "/"),
				outputFileCsv.replace(File.separator, "/"), 
				txtVerticalFactorName.getText(), 
				txtHorizontalFactorName.getText(), 
				txtSubPlotFactorName.getText(), 
				txtSubSubPlotFactorName.getText(), 
				factorID,
				factorLevels,
				txtTotalBlocks.getSelection(),
				txtTotalTrials.getSelection(),
				txtFieldRows.getSelection(),
				txtRows.getSelection(),
				txtRowsPerSub.getSelection(),
				fieldOrder);
		
		StarRandomizationUtilities.testVarArgs(
				outputFileTxt.replace(File.separator, "/"),
				outputFileCsv.replace(File.separator, "/"), 
				txtVerticalFactorName.getText(), 
				txtHorizontalFactorName.getText(), 
				txtSubPlotFactorName.getText(), 
				txtSubSubPlotFactorName.getText(), 
				factorID,
				factorLevels,
				txtTotalBlocks.getSelection(),
				txtTotalTrials.getSelection(),
				txtFieldRows.getSelection(),
				txtRows.getSelection(),
				txtRowsPerSub.getSelection(),
				fieldOrder);
				
		rInfo.close(); this.getShell().setMinimized(true);
		StarRandomizationUtilities.openAndRefreshFileFolder(outputFile  + outputFileCsv + ".csv");
		btnOk.setEnabled(true);
	}
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.RETRY_ID, "Reset", false);
		btnOk = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(404, 512);
	}

}
