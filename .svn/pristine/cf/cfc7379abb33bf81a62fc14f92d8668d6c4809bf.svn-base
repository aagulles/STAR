package org.irri.breedingtool.star.analysis.dialog;

import java.io.File;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.viewers.ListViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.DialogFormUtility;
import org.irri.breedingtool.utility.StarAnalysisUtilities;

public class ClusterAnalysisDialog extends Dialog {
	private Button btnOkay;
	private DialogFormUtility listManager = new DialogFormUtility();
	private String filePath = PartStackHandler.getActiveElementID();
	private Label lblNumericVariables;
	private Button btnSetToFactor;
	private TabItem tbtmVariableDescription;
	private Label lblFactors;
	private List lstFactors;
	private ListViewer listViewer_1;
	private List lstSelectedVariables;
	private ListViewer listViewer_2;
	private Button btnAddNumeric;
	private Label lblIdVariable;
	private Label lblSelectedVariables;
	private Text txtIDVariable;
	private Button btnAddFactor;
	private TabItem tbtmOptions_1;
	private Composite composite_1;
	private Label lblDistanceMeasures;
	private Combo cmboDistanceMeasures;
	private Group grpClusteringMethod;
	private Button btnAgglomerative;
	private Combo cmboClusterMethod;
	private Button btnDivisive;
	private Button btnKmeans;
	private Group grpDisplay;
	private Button btnDataStandardization;
	private Button btnDistanceMatrix;
	private Button btnClusterMembership;
	private Button btnSummaryStatistics;
	private Button btnHighlightClusters;
	private Button btnSaveClusterMembership;
	private Spinner txtNumCluster;
	private List lstNumericVariables;
	private Label lblNewLabel;

	/**
	 * Create the dialog.
	 * @param parentShell  
	 */
	public ClusterAnalysisDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.RESIZE);
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Cluster Analysis : " + new File(filePath).getName());
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		FillLayout fl_container = new FillLayout(SWT.HORIZONTAL);
		fl_container.marginHeight = 8;
		fl_container.marginWidth = 8;
		container.setLayout(fl_container);
		
		TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_BACKGROUND));
		
		tbtmVariableDescription = new TabItem(tabFolder, SWT.NONE);
		tbtmVariableDescription.setText("Variable Description");
		
		Composite composite = new Composite(tabFolder, SWT.NONE);
		tbtmVariableDescription.setControl(composite);
		GridLayout gl_composite = new GridLayout(3, false);
		gl_composite.marginHeight = 11;
		gl_composite.marginWidth = 9;
		composite.setLayout(gl_composite);
		
		lblNumericVariables = new Label(composite, SWT.NONE);
		lblNumericVariables.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblNumericVariables.setText("Numeric Variable(s):");
		lblNumericVariables.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.NORMAL));
		new Label(composite, SWT.NONE);
		
		lblSelectedVariables = new Label(composite, SWT.NONE);
		lblSelectedVariables.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblSelectedVariables.setText("Selected Variables:");
		lblSelectedVariables.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.NORMAL));
		
		ListViewer listViewer = new ListViewer(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		lstNumericVariables = listViewer.getList();
		GridData gd_lstNumericVariables = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstNumericVariables.widthHint = 140;
		gd_lstNumericVariables.heightHint = 120;
		lstNumericVariables.setLayoutData(gd_lstNumericVariables);
		lstNumericVariables.setItems(new String[] {});
		
		btnAddNumeric = new Button(composite, SWT.NONE);
		GridData gd_btnAddNumeric = new GridData(SWT.CENTER, SWT.CENTER, true, true, 1, 1);
		gd_btnAddNumeric.widthHint = 90;
		btnAddNumeric.setLayoutData(gd_btnAddNumeric);
		btnAddNumeric.setText("Add");
		
		listViewer_2 = new ListViewer(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		lstSelectedVariables = listViewer_2.getList();
		GridData gd_lstSelectedVariables = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstSelectedVariables.heightHint = 120;
		gd_lstSelectedVariables.widthHint = 140;
		lstSelectedVariables.setLayoutData(gd_lstSelectedVariables);
		lstSelectedVariables.setItems(new String[] {});
		
		btnSetToFactor = new Button(composite, SWT.NONE);
		GridData gd_btnSetToFactor = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_btnSetToFactor.widthHint = 110;
		btnSetToFactor.setLayoutData(gd_btnSetToFactor);
		btnSetToFactor.setText("Set to Factor");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		lblFactors = new Label(composite, SWT.NONE);
		lblFactors.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblFactors.setText("Factor(s):");
		lblFactors.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.NORMAL));
		new Label(composite, SWT.NONE);
		
		lblIdVariable = new Label(composite, SWT.NONE);
		lblIdVariable.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblIdVariable.setText("ID Variable:");
		lblIdVariable.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.NORMAL));
		
		listViewer_1 = new ListViewer(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		lstFactors = listViewer_1.getList();
		GridData gd_lstFactors = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstFactors.widthHint = 140;
		gd_lstFactors.heightHint = 74;
		lstFactors.setLayoutData(gd_lstFactors);
		lstFactors.setItems(new String[] {});
		
		btnAddFactor = new Button(composite, SWT.NONE);
		GridData gd_btnAddFactor = new GridData(SWT.CENTER, SWT.TOP, true, true, 1, 1);
		gd_btnAddFactor.widthHint = 90;
		btnAddFactor.setLayoutData(gd_btnAddFactor);
		btnAddFactor.setText("Add");
		
		txtIDVariable = new Text(composite, SWT.BORDER);
		txtIDVariable.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		txtIDVariable.setEditable(false);
		GridData gd_txtIDVariable = new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1);
		gd_txtIDVariable.widthHint = 140;
		txtIDVariable.setLayoutData(gd_txtIDVariable);
		
		tbtmOptions_1 = new TabItem(tabFolder, SWT.NONE);
		tbtmOptions_1.setText("Options");
		
		composite_1 = new Composite(tabFolder, SWT.NONE);
		tbtmOptions_1.setControl(composite_1);
		GridLayout gl_composite_1 = new GridLayout(2, false);
		gl_composite_1.marginHeight = 10;
		gl_composite_1.marginWidth = 10;
		composite_1.setLayout(gl_composite_1);
		
		Label lblNumberOfClusters_1 = new Label(composite_1, SWT.NONE);
		lblNumberOfClusters_1.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblNumberOfClusters_1.setText("Number of Clusters:");
		
		txtNumCluster = new Spinner(composite_1, SWT.BORDER);
		txtNumCluster.setMinimum(2);
		
		lblDistanceMeasures = new Label(composite_1, SWT.NONE);
		lblDistanceMeasures.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblDistanceMeasures.setText("Distance Measures:");
		
		cmboDistanceMeasures = new Combo(composite_1, SWT.READ_ONLY);
		cmboDistanceMeasures.setItems(new String[] {"Euclidean", "Maximum", "Manhattan", "Minkowski", "Canberra"});
		GridData gd_cmboDistanceMeasures = new GridData(SWT.LEFT, SWT.FILL, true, false, 1, 1);
		gd_cmboDistanceMeasures.widthHint = 134;
		cmboDistanceMeasures.setLayoutData(gd_cmboDistanceMeasures);
		cmboDistanceMeasures.select(0);
		
		lblNewLabel = new Label(composite_1, SWT.NONE);
		lblNewLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		new Label(composite_1, SWT.NONE);
		
		grpClusteringMethod = new Group(composite_1, SWT.NONE);
		GridData gd_grpClusteringMethod = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_grpClusteringMethod.heightHint = 165;
		gd_grpClusteringMethod.widthHint = 191;
		grpClusteringMethod.setLayoutData(gd_grpClusteringMethod);
		grpClusteringMethod.setText("Clustering Method");
		grpClusteringMethod.setLayout(new GridLayout(1, false));
		
		btnAgglomerative = new Button(grpClusteringMethod, SWT.RADIO);
		btnAgglomerative.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				cmboDistanceMeasures.setEnabled(true);
				cmboClusterMethod.setEnabled(true);
				btnDataStandardization.setEnabled(true);
				btnDistanceMatrix.setEnabled(true);
				btnHighlightClusters.setEnabled(true);
				btnSaveClusterMembership.setEnabled(true);
				btnSummaryStatistics.setEnabled(true);
				btnClusterMembership.setEnabled(true);
			}
		});
		btnAgglomerative.setText("Agglomerative");
		btnAgglomerative.setSelection(true);
		
		cmboClusterMethod = new Combo(grpClusteringMethod, SWT.READ_ONLY);
		cmboClusterMethod.setItems(new String[] {"Single Linkage", "Complete Linkage", "Average Linkage", "Ward's Method", "Centroid Method"});
		GridData gd_cmboClusterMethod = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_cmboClusterMethod.widthHint = 87;
		cmboClusterMethod.setLayoutData(gd_cmboClusterMethod);
		cmboClusterMethod.select(1);
		
		btnDivisive = new Button(grpClusteringMethod, SWT.RADIO);
		btnDivisive.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				cmboDistanceMeasures.setEnabled(true);
				cmboClusterMethod.setEnabled(false);
				btnDataStandardization.setEnabled(true);
				btnDistanceMatrix.setEnabled(true);
				btnHighlightClusters.setEnabled(true);
				btnSaveClusterMembership.setEnabled(true);
				btnSummaryStatistics.setEnabled(true);
				btnClusterMembership.setEnabled(true);
			}
		});
		btnDivisive.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false, 1, 1));
		btnDivisive.setText("Divisive");
		
		btnKmeans = new Button(grpClusteringMethod, SWT.RADIO);
		btnKmeans.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				cmboDistanceMeasures.setEnabled(false);
				cmboClusterMethod.setEnabled(false);
				btnDataStandardization.setEnabled(false);
				btnDistanceMatrix.setEnabled(false);
				btnHighlightClusters.setEnabled(false);
				btnSaveClusterMembership.setEnabled(true);
				btnSummaryStatistics.setEnabled(true);
				btnClusterMembership.setEnabled(true);
				
			}
		});
		btnKmeans.setText("K - Means");
		
		grpDisplay = new Group(composite_1, SWT.NONE);
		grpDisplay.setLayout(new GridLayout(1, false));
		GridData gd_grpDisplay = new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1);
		gd_grpDisplay.heightHint = 155;
		gd_grpDisplay.widthHint = 202;
		grpDisplay.setLayoutData(gd_grpDisplay);
		
		btnDataStandardization = new Button(grpDisplay, SWT.CHECK);
		btnDataStandardization.setText("Data Standardization");
		btnDataStandardization.setSelection(true);
		
		btnDistanceMatrix = new Button(grpDisplay, SWT.CHECK);
		btnDistanceMatrix.setText("Distance Matrix");
		
		btnClusterMembership = new Button(grpDisplay, SWT.CHECK);
		btnClusterMembership.setText("Cluster Membership");
		btnClusterMembership.setSelection(true);
		
		btnSummaryStatistics = new Button(grpDisplay, SWT.CHECK);
		btnSummaryStatistics.setText("Summary Statistics for each Cluster");
		btnSummaryStatistics.setSelection(true);
		
		btnHighlightClusters = new Button(grpDisplay, SWT.CHECK);
		btnHighlightClusters.setText("Highlight Clusters on Dendrogram");
		
		btnSaveClusterMembership = new Button(grpDisplay, SWT.CHECK);
		btnSaveClusterMembership.setText("Save Cluster Membership to a file");
		btnSaveClusterMembership.setSelection(true);
		initializeContent();
		return container;
	}
		
	
	void initializeContent(){
		listManager.initializeSingleButtonList(lstNumericVariables, lstSelectedVariables, btnAddNumeric);
		listManager.initializeSingleSelectionList(lstFactors, txtIDVariable, btnAddFactor);
		listManager.initializeVariableMoveList(lstNumericVariables, lstFactors, btnSetToFactor , filePath);
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath);	

	}

	
	void resetDialog(){
		lstNumericVariables.removeAll();
		lstSelectedVariables.removeAll();
		lstFactors.removeAll();
		txtIDVariable.setText("");
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath);
		btnAddNumeric.setText("Add");
		btnAddFactor.setText("Add");
		btnAddFactor.setEnabled(false);
		btnAgglomerative.setSelection(true);
		btnDivisive.setSelection(false);
		btnKmeans.setSelection(false);
		btnDataStandardization.setSelection(true);
		btnDistanceMatrix.setSelection(false);
		btnHighlightClusters.setSelection(false);
		btnSaveClusterMembership.setSelection(true);
		btnSummaryStatistics.setSelection(true);
		btnClusterMembership.setSelection(true);
		cmboDistanceMeasures.setText("Euclidean");
		txtNumCluster.setSelection(2);
		cmboClusterMethod.setText("Complete Linkage");		
	}
	
	
	@Override
	protected void buttonPressed(int ID){
		if(ID == IDialogConstants.OK_ID){
			okPressed();
		}
		else if(ID == IDialogConstants.CANCEL_ID){
			cancelPressed();
		}
		else if(ID == IDialogConstants.RETRY_ID){
			resetDialog();		
		}
	}
	
	@Override
	protected void okPressed(){
		
		String outputFolder = StarAnalysisUtilities.createOutputFolder(filePath,"ClusterAnalysis") +  File.separator;
		OperationProgressDialog rInfo = new OperationProgressDialog(
				getShell(), "Star Analysis");
		rInfo.open();
		//+ "//Output.txt"
		btnOkay.setEnabled(false);
		String dataFileName = filePath.replace(File.separator, "/");
		String outputPath = outputFolder;
		String[] var = lstSelectedVariables.getItems();
		String idVar = txtIDVariable.getText();
		boolean stand = btnDataStandardization.getSelection();
		String distance = cmboDistanceMeasures.getText();
		String clusmethod = cmboClusterMethod.getText();
		boolean distMatrix = btnDistanceMatrix.getSelection();
		boolean clusterMem = btnClusterMembership.getSelection();
		boolean descriptiveStat = btnSummaryStatistics.getSelection();
		Integer clusterNum = txtNumCluster.getSelection();
		boolean dendrogram = true;	
		boolean clusterBox = btnHighlightClusters.getSelection();
		boolean kgraph = true;
		boolean saveMem = true;
		
		if(btnAgglomerative.getSelection()){
				ProjectExplorerView.rJavaManager.getSTARAnalysisManager().doClusterAgglo(
				dataFileName ,
				outputPath.replace(File.separator, "/"),
				var,
				idVar,
				stand ,
				distance,
				clusmethod ,
				distMatrix,
				clusterMem,
				descriptiveStat,
				clusterNum ,
				dendrogram,
				clusterBox,
				saveMem);
		}
		else if(btnDivisive.getSelection()){
				ProjectExplorerView.rJavaManager.getSTARAnalysisManager().doClusterDivisive(
				dataFileName,
				outputPath.replace(File.separator, "/"),
				var,
				idVar,
				stand,
				distance,
				distMatrix,
				clusterMem,
				descriptiveStat,
				clusterNum,
				dendrogram,
				clusterBox,
				saveMem);
		}
		else if (btnKmeans.getSelection()){
				ProjectExplorerView.rJavaManager.getSTARAnalysisManager().doClusterKmeans(
				dataFileName,
				outputPath.replace(File.separator, "/"),
				var,
				idVar,
				clusterMem,
				descriptiveStat,
				clusterNum, 
				kgraph,
				saveMem);			
		}
		StarAnalysisUtilities.testVarArgs(
				dataFileName ,
				outputPath.replace(File.separator, "/"),
				var,
				idVar,
				stand ,
				distance,
				clusmethod ,
				distMatrix,
				clusterMem,
				descriptiveStat,
				clusterNum ,
				dendrogram,
				clusterBox,
				saveMem,
				kgraph);
		
		this.getShell().setMinimized(true);
		StarAnalysisUtilities.openAndRefreshFolder(outputPath);
		btnOkay.setEnabled(true);
		rInfo.close();
		
	}
	
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.RETRY_ID, "Reset", false);
		btnOkay = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
						IDialogConstants.CANCEL_LABEL, false);		
	}
	
	/**    
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(469, 459);
	}
}
