package org.irri.breedingtool.pbtools.randomization.dialog;

import java.io.File;
import java.util.ArrayList;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.FocusListener;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.StarRandomizationUtilities;

public class RandomizedCompleteBlockDesignDialog extends Dialog {

	private Table table;
	private int EDITABLECOLUMN;
	private Spinner txtTotalBlocks;
	private Spinner txtTotalTrials;
	private Text txtFileName;
	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public RandomizedCompleteBlockDesignDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.RESIZE);
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Randomization");
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		Label lblLbldialogtitle = new Label(container, SWT.NONE);
		lblLbldialogtitle.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.BOLD));
		lblLbldialogtitle.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblLbldialogtitle.setText("Randomized Complete Block Design");

		Label label = new Label(container, SWT.SEPARATOR | SWT.HORIZONTAL);
		label.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		Group grpDesignParameters = new Group(container, SWT.NONE);
		grpDesignParameters.setLayout(new GridLayout(1, false));
		grpDesignParameters.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		grpDesignParameters.setText("Design Parameters");

		Group grpFactorDefinition = new Group(grpDesignParameters, SWT.NONE);
		grpFactorDefinition.setLayout(new GridLayout(2, false));
		GridData gd_grpFactorDefinition = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_grpFactorDefinition.heightHint = 193;
		grpFactorDefinition.setLayoutData(gd_grpFactorDefinition);
		grpFactorDefinition.setText("Factor Definition:");

		Label lblNewLabel = new Label(grpFactorDefinition, SWT.NONE);
		lblNewLabel.setText("Number of Factors");

		final Spinner spnrTableLevel = new Spinner(grpFactorDefinition, SWT.BORDER);

		spnrTableLevel.setMaximum(10);
		spnrTableLevel.setMinimum(1);

		table = new Table(grpFactorDefinition, SWT.BORDER | SWT.FULL_SELECTION);
		GridData gd_table = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
		gd_table.heightHint = 135;
		table.setLayoutData(gd_table);
		table.setHeaderVisible(true);
		table.setLinesVisible(true);

		TableColumn column1 = new TableColumn(table, SWT.NONE);
		column1.setWidth(86);
		TableColumn column2 = new TableColumn(table, SWT.NONE);
		column2.setWidth(136);
		TableColumn column3= new TableColumn(table, SWT.NONE);
		column3.setWidth(87);

		column2.setText("Name");
		column3.setText("Level");

		setTableRows(table,spnrTableLevel.getSelection());
		spnrTableLevel.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				setTableRows(table,spnrTableLevel.getSelection());

			}
		});
		final TableEditor editor = new TableEditor(table);
		// editing the second column

		final Spinner sprLevel = new Spinner(table, SWT.NONE);
		sprLevel.setIncrement(1);

		table.addListener(SWT.MouseDown, new Listener() {
			@Override
			public void handleEvent(Event e) {



				// Clean up any previous editor control
				Control oldEditor = editor.getEditor();
				if (oldEditor != null) oldEditor.dispose();

				// Identify the selected row
				TableItem item = table.getSelection()[0];
				if (item == null) return;
				Point mPoint = new Point(e.x,e.y);

				for(int i = 0; i < item.getParent().getColumnCount(); i++){
					if(item.getBounds(i).contains(mPoint))
						EDITABLECOLUMN = i;
				}

				System.out.println(EDITABLECOLUMN);

				if(EDITABLECOLUMN == 0) EDITABLECOLUMN = 1;
				// The control that will be the editor must be a child of the Table




				if (EDITABLECOLUMN == 2) {

					Spinner newEditor = new Spinner(table, SWT.NONE);
					newEditor.setIncrement(1);
					newEditor.setMaximum(9999999);
					newEditor.setMinimum(2);
					newEditor.setSelection(Integer.valueOf(item
							.getText(EDITABLECOLUMN)));
					newEditor.addModifyListener(new ModifyListener() {
						public void modifyText(ModifyEvent me) {
							Spinner text = (Spinner) editor.getEditor();
							editor.getItem().setText(EDITABLECOLUMN,
									text.getText());
//							StarRandomizationUtilities.validateSpinner(text);
						}
					});
					newEditor.addFocusListener(new FocusListener(){

						@Override
						public void focusGained(FocusEvent e) {
							// TODO Auto-generated method stub
							
						}

						@Override
						public void focusLost(FocusEvent e) {
							Spinner text = (Spinner) editor.getEditor();
							text.dispose();
						}
						
					});
					//		newEditor.selectAll();
					newEditor.setFocus();
					editor.setEditor(newEditor, item, EDITABLECOLUMN);

				}
				else{
					Text newEditor = new Text(table, SWT.NONE);
					newEditor.setText(item.getText(EDITABLECOLUMN));
					newEditor.addModifyListener(new ModifyListener() {
						public void modifyText(ModifyEvent me) {
							Text text = (Text) editor.getEditor();
							editor.getItem().setText(EDITABLECOLUMN,
									text.getText());
						
						}
					});
					newEditor.addFocusListener(new FocusListener(){

						@Override
						public void focusGained(FocusEvent e) {
							// TODO Auto-generated method stub
							
						}

						@Override
						public void focusLost(FocusEvent e) {
							Text text = (Text) editor.getEditor();
							text.dispose();
						}
						
					});
					newEditor.selectAll();
					newEditor.setFocus();
					editor.setEditor(newEditor, item, EDITABLECOLUMN);

				}
			}
		});
		//The editor must have the same size as the cell and must
		//not be any smaller than 50 pixels.
		editor.horizontalAlignment = SWT.LEFT;
		editor.grabHorizontal = true;
		editor.minimumWidth = 70;

		Composite composite_1 = new Composite(grpDesignParameters, SWT.NONE);
		composite_1.setLayout(new GridLayout(2, false));
		composite_1.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));




		Label lblNumberOfReplicates = new Label(composite_1, SWT.NONE);
		lblNumberOfReplicates.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, false, 1, 1));
		lblNumberOfReplicates.setText("Number of Blocks");

		txtTotalBlocks = new Spinner(composite_1, SWT.BORDER);
		GridData gd_txtTotalBlocks = new GridData(SWT.CENTER, SWT.CENTER, true, false, 1, 1);
		gd_txtTotalBlocks.widthHint = 50;
		txtTotalBlocks.setLayoutData(gd_txtTotalBlocks);
		txtTotalBlocks.setMaximum(100000);
		txtTotalBlocks.setMinimum(2);

		Label lblNumberOfTrials = new Label(composite_1, SWT.NONE);
		lblNumberOfTrials.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, false, 1, 1));
		lblNumberOfTrials.setText("Number of Trials");

		txtTotalTrials = new Spinner(composite_1, SWT.BORDER);
		GridData gd_txtTotalTrials = new GridData(SWT.CENTER, SWT.CENTER, true, false, 1, 1);
		gd_txtTotalTrials.widthHint = 50;
		txtTotalTrials.setLayoutData(gd_txtTotalTrials);
		txtTotalTrials.setMaximum(100000);
		txtTotalTrials.setMinimum(1);

		Group grpFieldBookFilename = new Group(container, SWT.NONE);
		grpFieldBookFilename.setLayout(new GridLayout(1, false));
		GridData gd_grpFieldBookFilename = new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1);
		gd_grpFieldBookFilename.heightHint = 49;
		grpFieldBookFilename.setLayoutData(gd_grpFieldBookFilename);
		grpFieldBookFilename.setText("Field Book Filename");

		txtFileName = new Text(grpFieldBookFilename, SWT.BORDER);
		txtFileName.setText("fieldbookRCBD");
		txtFileName.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		return container;
	}
	@Override
	protected void okPressed(){	

		if(txtFileName.getText().equals(""))  { 
			MessageDialog.openError(getShell(), "Validation Error", "Field Filename must not be empty."); 
			return ; 
		}

		

		ArrayList<String> tableNames = new ArrayList<String>();
		ArrayList<Integer> tableLevels = new ArrayList<Integer>();

		for(int i = 0; i < table.getItemCount(); i++){
			if(table.getItem(i).getText(1).equals("")){
				MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "All name fields must not be empty", SWT.NONE);
				return;
			}
			if(tableNames.contains(table.getItem(i).getText(1))){
				MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Similar variable names detected. Make sure all the variables are unique.", SWT.NONE);
				return ; 
			}

			if(!StarRandomizationUtilities.validateVariableText(table.getItem(i).getText(1))){
				MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "All name fields must start with a letter and must contain:[a-z,A-Z],[_] only. ", SWT.NONE);
				return;
			}
			tableNames.add(table.getItem(i).getText(1));
			tableLevels.add(Integer.parseInt(table.getItem(i).getText(2)));

		}
		OperationProgressDialog rInfo = new OperationProgressDialog(getShell(),  "Star Randomization");
		rInfo.open();
		String outputFile = StarRandomizationUtilities.createOutputFile("RCBD", txtFileName.getText());
		String outputFileTxt = outputFile + ".txt";
		String outputFileCsv = outputFile + ".csv";
		StarRandomizationUtilities.testVarArgs(outputFileCsv.replace("\\", "/"), outputFileTxt.replace("\\", "/"), tableNames.toArray(new String[tableNames.size()]), tableLevels.toArray(new Integer[tableNames.size()]), txtTotalBlocks.getSelection(), txtTotalTrials.getSelection());
		

		ProjectExplorerView.rJavaManager.getPbToolRandomizationManager().doDesignRCBD(outputFileCsv.replace("\\", "/"), outputFileTxt.replace("\\", "/"), tableNames.toArray(new String[tableNames.size()]), tableLevels.toArray(new Integer[tableNames.size()]), txtTotalBlocks.getSelection(), txtTotalTrials.getSelection());

		rInfo.close(); this.getShell().setMinimized(true);
		StarRandomizationUtilities.openAndRefreshFileFolder(outputFile);
	}
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(423, 580);
	}
	private void setTableRows(Table dialogTable,int levels){

		if(dialogTable.getItemCount() < levels)
		{
			for (int i = dialogTable.getItemCount(); i < levels; i++) {
				TableItem item = new TableItem(table, SWT.NONE);
				item.setText(new String[] {"FACTOR "+(char) (65 + i),"factor"+(char) (65 + i), "" +2});

			}
		}
		else if(dialogTable.getItemCount() > levels){
			dialogTable.remove(levels, dialogTable.getItemCount() - 1);
		}
	}
}
