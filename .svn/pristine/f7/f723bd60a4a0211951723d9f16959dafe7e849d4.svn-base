package org.irri.breedingtool.star.design.dialog;

import java.io.File;
import java.util.ArrayList;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.StarRandomizationUtilities;
import org.eclipse.swt.widgets.Combo;

public class StripPlotDesignDialog extends Dialog {

	private Spinner txtTotalTrials;
	private Spinner txtTotalBlocks;
	private Spinner txtHorizontalFactorLevels;
	private Spinner txtVerticalFactorLevels;
	private Text txtVerticalFactorNames;
	private Text txtHorizontalFactorNames;
	private Text txtVerticalFactorID;
	private Text txtHorizontalFactorID;
	private Text txtFileName;
	private Spinner txtFieldRows;
	private Button btnOk;
	private Combo cmbOrder;
	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public StripPlotDesignDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.RESIZE);
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Randomization and Layout");
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);

		Label lblFactorialDesign = new Label(container, SWT.NONE);
		lblFactorialDesign.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblFactorialDesign.setFont(SWTResourceManager.getFont("Tahoma", 10, SWT.BOLD));
		lblFactorialDesign.setText("Strip Plot Design");
		
		Label label = new Label(container, SWT.SEPARATOR | SWT.HORIZONTAL);
		label.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		
		Group grpDesignParameters = new Group(container, SWT.NONE);
		grpDesignParameters.setLayout(new GridLayout(1, false));
		GridData gd_grpDesignParameters = new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1);
		gd_grpDesignParameters.heightHint = 191;
		grpDesignParameters.setLayoutData(gd_grpDesignParameters);
		
		Group grpFactorDefinition = new Group(grpDesignParameters, SWT.NONE);
		grpFactorDefinition.setLayout(new GridLayout(4, false));
		grpFactorDefinition.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		grpFactorDefinition.setText("Factor Definition:");
		
		Label lblFactor = new Label(grpFactorDefinition, SWT.NONE);
		lblFactor.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblFactor.setText("Factor");
		lblFactor.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label lblName = new Label(grpFactorDefinition, SWT.NONE);
		lblName.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblName.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, false, 1, 1));
		lblName.setText("Name");
		
		Label lblFactorId = new Label(grpFactorDefinition, SWT.NONE);
		lblFactorId.setText("Factor ID");
		lblFactorId.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label lblLevels = new Label(grpFactorDefinition, SWT.NONE);
		lblLevels.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblLevels.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, true, false, 1, 1));
		lblLevels.setText("Levels");
		
		Label lblMainPlotFactor = new Label(grpFactorDefinition, SWT.NONE);
		lblMainPlotFactor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		lblMainPlotFactor.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblMainPlotFactor.setText("Vertical Factor");
		
		txtVerticalFactorNames = new Text(grpFactorDefinition, SWT.BORDER);
		txtVerticalFactorNames.setText("vertical");
		GridData gd_txtVerticalFactorNames = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_txtVerticalFactorNames.widthHint = 80;
		txtVerticalFactorNames.setLayoutData(gd_txtVerticalFactorNames);
		
		txtVerticalFactorID = new Text(grpFactorDefinition, SWT.BORDER);
		txtVerticalFactorID.setText("A");
		GridData gd_txtVerticalFactorID = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtVerticalFactorID.widthHint = 50;
		txtVerticalFactorID.setLayoutData(gd_txtVerticalFactorID);
		
		txtVerticalFactorLevels = new Spinner(grpFactorDefinition, SWT.BORDER);
		txtVerticalFactorLevels.setMaximum(500);
		txtVerticalFactorLevels.setMinimum(2);
		GridData gd_txtVerticalFactorLevels = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_txtVerticalFactorLevels.widthHint = 20;
		txtVerticalFactorLevels.setLayoutData(gd_txtVerticalFactorLevels);
		
		Label lblSubplotFactor = new Label(grpFactorDefinition, SWT.NONE);
		lblSubplotFactor.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		lblSubplotFactor.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblSubplotFactor.setText("Horizontal Factor");
		
		txtHorizontalFactorNames = new Text(grpFactorDefinition, SWT.BORDER);
		txtHorizontalFactorNames.setText("horizontal");
		GridData gd_txtHorizontalFactorNames = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtHorizontalFactorNames.widthHint = 80;
		txtHorizontalFactorNames.setLayoutData(gd_txtHorizontalFactorNames);
		
		txtHorizontalFactorID = new Text(grpFactorDefinition, SWT.BORDER);
		txtHorizontalFactorID.setText("B");
		GridData gd_txtHorizontalFactorID = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtHorizontalFactorID.widthHint = 50;
		txtHorizontalFactorID.setLayoutData(gd_txtHorizontalFactorID);
		
		txtHorizontalFactorLevels = new Spinner(grpFactorDefinition, SWT.BORDER);
		txtHorizontalFactorLevels.setMaximum(500);
		txtHorizontalFactorLevels.setMinimum(2);
		GridData gd_txtHorizontalFactorLevels = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtHorizontalFactorLevels.widthHint = 20;
		txtHorizontalFactorLevels.setLayoutData(gd_txtHorizontalFactorLevels);
		
		Composite composite_1 = new Composite(grpDesignParameters, SWT.NONE);
		composite_1.setFont(SWTResourceManager.getFont("Tahoma", 9, SWT.NORMAL));
		composite_1.setLayout(new GridLayout(3, false));
		composite_1.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));
		
		Label lblNumberOfReplicates = new Label(composite_1, SWT.NONE);
		lblNumberOfReplicates.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblNumberOfReplicates.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblNumberOfReplicates.setText("Number of Blocks");
		
		Label lblNewLabel = new Label(composite_1, SWT.NONE);
		GridData gd_lblNewLabel = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_lblNewLabel.widthHint = 60;
		lblNewLabel.setLayoutData(gd_lblNewLabel);
		
		txtTotalBlocks = new Spinner(composite_1, SWT.BORDER);
		GridData gd_txtTotalBlocks = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtTotalBlocks.widthHint = 20;
		txtTotalBlocks.setLayoutData(gd_txtTotalBlocks);
		txtTotalBlocks.setMaximum(500);
		txtTotalBlocks.setMinimum(2);
		
		Label lblNumberOfField = new Label(composite_1, SWT.NONE);
		lblNumberOfField.setText("Number of Field Rows");
		lblNumberOfField.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		Label label_4 = new Label(composite_1, SWT.NONE);
		GridData gd_label_4 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label_4.widthHint = 60;
		label_4.setLayoutData(gd_label_4);
		
		txtFieldRows = new Spinner(composite_1, SWT.BORDER);
		GridData gd_txtFieldRows = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_txtFieldRows.widthHint = 20;
		txtFieldRows.setLayoutData(gd_txtFieldRows);
		txtFieldRows.setMaximum(500);
		txtFieldRows.setMinimum(2);
		
		Label lblNumberOfTrials = new Label(composite_1, SWT.NONE);
		lblNumberOfTrials.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblNumberOfTrials.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblNumberOfTrials.setText("Number of Trials");
		new Label(composite_1, SWT.NONE);
		
		txtTotalTrials = new Spinner(composite_1, SWT.BORDER);
		GridData gd_txtTotalTrials = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtTotalTrials.widthHint = 20;
		txtTotalTrials.setLayoutData(gd_txtTotalTrials);
		txtTotalTrials.setMaximum(100);
		txtTotalTrials.setMinimum(1);
		
		Group grpFieldBookFilename1 = new Group(container, SWT.NONE);
		grpFieldBookFilename1.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, true, 1, 1));
		grpFieldBookFilename1.setText("Field Book ");
		grpFieldBookFilename1.setLayout(new GridLayout(5, false));
		
		Label label_1 = new Label(grpFieldBookFilename1, SWT.NONE);
		GridData gd_label_1 = new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1);
		gd_label_1.widthHint = 40;
		label_1.setLayoutData(gd_label_1);
		label_1.setText("Name");
		
		txtFileName = new Text(grpFieldBookFilename1, SWT.BORDER);
		txtFileName.setText("fieldbookStrip");
		GridData gd_txtFileName = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_txtFileName.widthHint = 100;
		txtFileName.setLayoutData(gd_txtFileName);
		
		Label label_2 = new Label(grpFieldBookFilename1, SWT.NONE);
		GridData gd_label_2 = new GridData(SWT.LEFT, SWT.CENTER, false, false, 1, 1);
		gd_label_2.widthHint = 10;
		label_2.setLayoutData(gd_label_2);
		
		Label label_3 = new Label(grpFieldBookFilename1, SWT.NONE);
		GridData gd_label_3 = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_label_3.widthHint = 40;
		label_3.setLayoutData(gd_label_3);
		label_3.setText("Order");
		
		cmbOrder = new Combo(grpFieldBookFilename1, SWT.READ_ONLY);
		cmbOrder.setItems(new String[] {"Plot Order", "Serpentine"});
		GridData gd_cmbOrder = new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1);
		gd_cmbOrder.widthHint = 70;
		cmbOrder.setLayoutData(gd_cmbOrder);
		cmbOrder.select(0);
		
		
		return container;
	}
	
	@Override
	protected void buttonPressed(int buttonId) { //when Reset button is pressed
		if (buttonId == IDialogConstants.RETRY_ID) {
			txtVerticalFactorNames.setText("vertical");
			txtHorizontalFactorNames.setText("horizontal");
			txtVerticalFactorID.setText("A");
			txtHorizontalFactorID.setText("B");
			txtVerticalFactorLevels.setSelection(2);
			txtHorizontalFactorLevels.setSelection(2);
			txtTotalBlocks.setSelection(2);
			txtTotalTrials.setSelection(1);
			txtFieldRows.setSelection(1);
			cmbOrder.setText("Plot Order");
			txtFileName.setText("fieldbookStrip");
		}
		super.buttonPressed(buttonId);
	}
	
	
	@Override
	protected void okPressed(){  	
		ArrayList<Text> listText = new ArrayList<Text>();
		listText.add(txtVerticalFactorID);
		listText.add(txtHorizontalFactorID);
		
		if(!StarRandomizationUtilities.isTextUnique(listText)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Similar variable names detected. Make sure all the variables are unique.", SWT.NONE);
			return ; 

		}

		for(int i = 0; i < listText.size(); i++){
			if(listText.get(i) != txtFileName){
				if(!StarRandomizationUtilities.validateVariableText(listText.get(i).getText())){
					MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "'" + listText.get(i).getText() + "' is not a valid name. \nAll name fields must start with a letter and must contain:[a-z,A-Z] only. ", SWT.NONE);
					
					return ; 
				}
			}
		}
		if(txtFileName.getText().equals(""))  { 
			MessageDialog.openError(getShell(), "Validation Error", "Field Filename must not be empty."); 
			return ; 
		}

		if(!StarRandomizationUtilities.validateTextFiles(txtVerticalFactorNames,txtHorizontalFactorNames)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Fields must not be empty", SWT.ERROR);
			return;
		}
		
		if(!StarRandomizationUtilities.validateTextFiles(txtVerticalFactorID,txtHorizontalFactorID)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Fields must not be empty", SWT.ERROR);
			return;
		}
		
		String mainfactorID = txtVerticalFactorID.getText().toString();
		if(!StarRandomizationUtilities.validateVariableText(mainfactorID)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must start with a letter and must contain:[a-z,A-Z] only.", SWT.ERROR);
			return;
		}
		String subfactorID = txtHorizontalFactorID.getText().toString();
		if(!StarRandomizationUtilities.validateVariableText(subfactorID)){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must start with a letter and must contain:[a-z,A-Z] only.", SWT.ERROR);
			return;
		}
		
		int plot = (txtTotalBlocks.getSelection() * txtVerticalFactorLevels.getSelection() * txtHorizontalFactorLevels.getSelection());
		if ((plot  % txtFieldRows.getSelection()) !=0 ){
			MessageDialog.openError(getShell(), "Validation Error", "Number of field rows must divide number of plots."); 
			return ;
		}
		
		if ((txtFieldRows.getSelection()  % txtHorizontalFactorLevels.getSelection()) !=0 ){
			MessageDialog.openError(getShell(), "Validation Error", "Number of field rows must be divisible by the levels of horizontal factor."); 
			return ;
		}
		
		if(txtVerticalFactorID.getCharCount()>4){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must contain not more than four characters. ", SWT.ERROR);
			return;	
		}
		if(txtHorizontalFactorID.getCharCount()>4){
			MessageDialog.open(SWT.ERROR, this.getShell(), "Validation Error", "Factor ID must contain not more than four characters. ", SWT.ERROR);
			return;	
		}
		
		OperationProgressDialog rInfo = new OperationProgressDialog(getShell(),  "Star Randomization");
		rInfo.open();
		btnOk.setEnabled(false);
		
		String outputFile = StarRandomizationUtilities.createOutputFolder("StripPlot");
		String outputFileTxt = outputFile;
		String outputFileCsv = txtFileName.getText();
		String fieldOrder = "Plot Order";
		if(cmbOrder.getText().equals("Serpentine")) fieldOrder = "Serpentine";
		
		
		Integer factorLevels[] = {txtVerticalFactorLevels.getSelection(),txtHorizontalFactorLevels.getSelection()};
		String factorID[] = {txtVerticalFactorID.getText(), txtHorizontalFactorID.getText()};

		StarRandomizationUtilities.testVarArgs(
				outputFileTxt.replace(File.separator, "/"),
				outputFileCsv.replace(File.separator, "/"), 
				txtVerticalFactorNames.getText(), 
				txtHorizontalFactorNames.getText(), 
				null, 
				null, 
				factorID,
				factorLevels,
				txtTotalBlocks.getSelection(),
				txtTotalTrials.getSelection(),
				txtFieldRows.getSelection(),
				null,
				null,
				fieldOrder);
		
		ProjectExplorerView.rJavaManager.getSTARDesignManager().doDesignStrip(
				outputFileTxt.replace(File.separator, "/"),
				outputFileCsv.replace(File.separator, "/"), 
				txtVerticalFactorNames.getText(), 
				txtHorizontalFactorNames.getText(), 
				null, 
				null, 
				factorID,
				factorLevels,
				txtTotalBlocks.getSelection(),
				txtTotalTrials.getSelection(),
				txtFieldRows.getSelection(),
				null,
				null,
				fieldOrder);
		

		
		rInfo.close(); this.getShell().setMinimized(true);
		StarRandomizationUtilities.openAndRefreshFileFolder(outputFile  + outputFileCsv + ".csv");
		btnOk.setEnabled(true);
	}
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.RETRY_ID, "Reset", false);
		btnOk = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(401, 441);
	}
}
