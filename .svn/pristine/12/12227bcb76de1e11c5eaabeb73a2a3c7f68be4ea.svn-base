package org.irri.breedingtool.star.analysis.dialog;

import java.io.File;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ListViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.DialogFormUtility;
import org.irri.breedingtool.utility.DialogListValidator;
import org.irri.breedingtool.utility.StarAnalysisUtilities;

public class ManovaDialog extends Dialog {
	private Button btnOkay;
	private DialogFormUtility listManager = new DialogFormUtility();
	private String filePath = PartStackHandler.getActiveElementID();
	private Label lblNumericVariables;
	private Button btnSetToFactor;
	private TabItem tbtmVariableDescription;
	private Label lblFactors;
	private List lstFactors;
	private ListViewer listViewer_1;
	private List lstResponseVariables;
	private ListViewer listViewer_2;
	private Button btnAddNumeric;
	private Label lblFactor;
	
	private Label lblResponseVars;
	private Text txtFactor;
	private Button btnAddFactor;
	private TabItem tbtmOptions_1;
	private Composite composite_1;
	private Label lblTestStat;
	private Combo cmboTestStat;
	private Group grpDisplay;
	private Button btnStatRespVars;
	private Button btnShapiroWilk;
	private Button btnBoxM;
	private Button btnBartletts;
	private List lstNumericVariables;
	private Button btnAddBlk;
	private Text txtBlk;
	private Label lblBlock;
	private Label lblDesign;
	private Combo cmbDesign;
	private Group grpSave;
	private Button btnSSHypo;
	private Button btnSSError;
	private String[] testStatistics = {"Pillai","Wilks","Hotelling-Lawley","Roy"};

	/**
	 * Create the dialog.
	 * @param parentShell  
	 */
	public ManovaDialog(Shell parentShell) {
		super(parentShell);
		setShellStyle(SWT.DIALOG_TRIM | SWT.MIN | SWT.RESIZE);
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Multivariate Analysis of Variance : " + new File(filePath).getName());
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		FillLayout fl_container = new FillLayout(SWT.HORIZONTAL);
		fl_container.marginHeight = 8;
		fl_container.marginWidth = 8;
		container.setLayout(fl_container);
		
		TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_BACKGROUND));
		
		tbtmVariableDescription = new TabItem(tabFolder, SWT.NONE);
		tbtmVariableDescription.setText("Variable Description");
		
		Composite composite = new Composite(tabFolder, SWT.NONE);
		tbtmVariableDescription.setControl(composite);
		GridLayout gl_composite = new GridLayout(3, false);
		gl_composite.marginHeight = 11;
		gl_composite.marginWidth = 9;
		composite.setLayout(gl_composite);
		
		lblDesign = new Label(composite, SWT.NONE);
		lblDesign.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		lblDesign.setText("Design:");
		
		cmbDesign = new Combo(composite, SWT.READ_ONLY);
		cmbDesign.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (cmbDesign.getSelectionIndex()==0){//CRD
					btnAddBlk.setEnabled(false);
					lblBlock.setEnabled(false);
					txtBlk.setEnabled(false);
					
				}else if (cmbDesign.getSelectionIndex()==1){//RCBD
					btnAddFactor.setEnabled(true);
					btnAddBlk.setEnabled(true);
					lblBlock.setEnabled(true);
					txtBlk.setEnabled(true);
				}
			}
		});
		cmbDesign.setItems(new String[] {"Completely Randomized Design (CRD)", "Randomized Complete Block Design (RCBD)"});
		cmbDesign.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 2, 1));
		cmbDesign.select(1);
		
		lblNumericVariables = new Label(composite, SWT.NONE);
		lblNumericVariables.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblNumericVariables.setText("Numeric Variables:");
		lblNumericVariables.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		new Label(composite, SWT.NONE);
		
		lblResponseVars = new Label(composite, SWT.NONE);
		lblResponseVars.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblResponseVars.setText("Response Variables:");
		lblResponseVars.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		ListViewer listViewer = new ListViewer(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		lstNumericVariables = listViewer.getList();
		GridData gd_lstNumericVariables = new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1);
		gd_lstNumericVariables.widthHint = 140;
		gd_lstNumericVariables.heightHint = 100;
		lstNumericVariables.setLayoutData(gd_lstNumericVariables);
		lstNumericVariables.setItems(new String[] {});
		
		btnAddNumeric = new Button(composite, SWT.NONE);
		GridData gd_btnAddNumeric = new GridData(SWT.CENTER, SWT.CENTER, true, true, 1, 1);
		gd_btnAddNumeric.widthHint = 90;
		btnAddNumeric.setLayoutData(gd_btnAddNumeric);
		btnAddNumeric.setText("Add");
		
		listViewer_2 = new ListViewer(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		lstResponseVariables = listViewer_2.getList();
		GridData gd_lstResponseVariables = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstResponseVariables.heightHint = 100;
		gd_lstResponseVariables.widthHint = 140;
		lstResponseVariables.setLayoutData(gd_lstResponseVariables);
		lstResponseVariables.setItems(new String[] {});
		
		btnSetToFactor = new Button(composite, SWT.NONE);
		GridData gd_btnSetToFactor = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_btnSetToFactor.widthHint = 110;
		btnSetToFactor.setLayoutData(gd_btnSetToFactor);
		btnSetToFactor.setText("Set to Factor");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		lblFactors = new Label(composite, SWT.NONE);
		lblFactors.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblFactors.setText("Factor(s):");
		lblFactors.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		new Label(composite, SWT.NONE);
		
		lblFactor = new Label(composite, SWT.NONE);
		lblFactor.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		lblFactor.setText("Treatment:");
		lblFactor.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		listViewer_1 = new ListViewer(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		lstFactors = listViewer_1.getList();
		GridData gd_lstFactors = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 3);
		gd_lstFactors.widthHint = 140;
		gd_lstFactors.heightHint = 100;
		lstFactors.setLayoutData(gd_lstFactors);
		lstFactors.setItems(new String[] {});
		
		btnAddFactor = new Button(composite, SWT.NONE);
		GridData gd_btnAddFactor = new GridData(SWT.CENTER, SWT.TOP, true, true, 1, 1);
		gd_btnAddFactor.widthHint = 90;
		btnAddFactor.setLayoutData(gd_btnAddFactor);
		btnAddFactor.setText("Add");
		
		txtFactor = new Text(composite, SWT.BORDER);
		txtFactor.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		txtFactor.setEditable(false);
		GridData gd_txtFactor = new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1);
		gd_txtFactor.widthHint = 140;
		txtFactor.setLayoutData(gd_txtFactor);
		new Label(composite, SWT.NONE);
		
		lblBlock = new Label(composite, SWT.NONE);
		lblBlock.setText("Block:");
		lblBlock.setFont(SWTResourceManager.getFont("Tahoma", 8, SWT.NORMAL));
		
		btnAddBlk = new Button(composite, SWT.NONE);
		GridData gd_btnAddBlk = new GridData(SWT.CENTER, SWT.TOP, false, false, 1, 1);
		gd_btnAddBlk.widthHint = 90;
		btnAddBlk.setLayoutData(gd_btnAddBlk);
		btnAddBlk.setText("Add");
		
		txtBlk = new Text(composite, SWT.BORDER);
		txtBlk.setEditable(false);
		txtBlk.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		txtBlk.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
		
		tbtmOptions_1 = new TabItem(tabFolder, SWT.NONE);
		tbtmOptions_1.setText("Options");
		
		composite_1 = new Composite(tabFolder, SWT.NONE);
		tbtmOptions_1.setControl(composite_1);
		GridLayout gl_composite_1 = new GridLayout(2, false);
		gl_composite_1.marginHeight = 10;
		gl_composite_1.marginWidth = 10;
		composite_1.setLayout(gl_composite_1);
		
		lblTestStat = new Label(composite_1, SWT.NONE);
		lblTestStat.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		lblTestStat.setText("Test Statistic:");
		
		cmboTestStat = new Combo(composite_1, SWT.READ_ONLY);
		cmboTestStat.setItems(new String[] {"Pillai's Trace", "Wilks' Lambda", "Hotelling-Lawley Trace", "Roy's maximum-root"});
		GridData gd_cmboTestStat = new GridData(SWT.LEFT, SWT.FILL, true, false, 1, 1);
		gd_cmboTestStat.widthHint = 134;
		cmboTestStat.setLayoutData(gd_cmboTestStat);
		cmboTestStat.select(1);
		
		grpDisplay = new Group(composite_1, SWT.NONE);
		grpDisplay.setText("Display");
		grpDisplay.setLayout(new GridLayout(1, false));
		GridData gd_grpDisplay = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
		gd_grpDisplay.heightHint = 110;
		gd_grpDisplay.widthHint = 200;
		grpDisplay.setLayoutData(gd_grpDisplay);
		
		btnStatRespVars = new Button(grpDisplay, SWT.CHECK);
		btnStatRespVars.setText("Descriptive Statistics of the Response Variables");
		
		btnShapiroWilk = new Button(grpDisplay, SWT.CHECK);
		btnShapiroWilk.setText("Shapiro-Wilk Multivariate Normality Test");
		
		btnBoxM = new Button(grpDisplay, SWT.CHECK);
		btnBoxM.setText("Box's M Test for Homogeneity of Covariance Matrices");
		
		btnBartletts = new Button(grpDisplay, SWT.CHECK);
		btnBartletts.setText("Bartlett's Sphericity Test");
		
		grpSave = new Group(composite_1, SWT.NONE);
		grpSave.setLayout(new GridLayout(1, false));
		GridData gd_grpSave = new GridData(SWT.FILL, SWT.CENTER, true, true, 2, 1);
		gd_grpSave.widthHint = 200;
		gd_grpSave.heightHint = 60;
		grpSave.setLayoutData(gd_grpSave);
		grpSave.setText("Save");
		
		btnSSHypo = new Button(grpSave, SWT.CHECK);
		btnSSHypo.setText("Sum of Squares and cross products for the hypothesis");
		
		btnSSError = new Button(grpSave, SWT.CHECK);
		btnSSError.setText("Sum of Squares and cross products for error");
		initializeContent();
		return container;
	}
		
	
	void initializeContent(){
		listManager.initializeSingleButtonList(lstNumericVariables, lstResponseVariables, btnAddNumeric);
		listManager.initializeSingleSelectionList(lstFactors, txtFactor, btnAddFactor);
		listManager.initializeSingleSelectionList(lstFactors, txtBlk, btnSetToFactor,btnAddBlk, new manovaValidate(cmbDesign,btnAddBlk));
		listManager.initializeVariableMoveList(lstNumericVariables, lstFactors, btnSetToFactor , filePath);
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath);	

	}

	
	void resetDialog(){
		lstNumericVariables.removeAll();
		lstResponseVariables.removeAll();
		lstFactors.removeAll();
		txtFactor.setText("");
		txtBlk.setText("");
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath);
		btnAddNumeric.setText("Add");
		btnAddFactor.setText("Add");
		btnAddBlk.setText("Add");
		btnAddFactor.setEnabled(false);
		btnAddBlk.setEnabled(false);
		btnStatRespVars.setSelection(false);
		btnSSHypo.setSelection(false);
		btnSSError.setSelection(false);
//		btnPairwise.setSelection(false);
		btnBartletts.setSelection(false);
		btnBoxM.setSelection(false);
		btnShapiroWilk.setSelection(false);
		cmbDesign.setText("Randomized Complete Block Design (RCBD)");
		cmboTestStat.setText("Wilks' Lambda");
	}
	
	
	@Override
	protected void buttonPressed(int ID){
		if(ID == IDialogConstants.OK_ID){
			okPressed();
		}
		else if(ID == IDialogConstants.CANCEL_ID){
			cancelPressed();
		}
		else if(ID == IDialogConstants.RETRY_ID){
			resetDialog();		
		}
	}
	
	@Override
	protected void okPressed(){
		
		String outputFolder = StarAnalysisUtilities.createOutputFolder(filePath,"Manova");
		String dataFileName = filePath.replace(File.separator, "/");
		String outputPath = outputFolder;
		String[] yVars = lstResponseVariables.getItems();
		String factorVar = txtFactor.getText();
		String repVar = txtBlk.getText();
		if (cmbDesign.getText().equals("Completely Randomized Design (CRD)")){
			repVar = null;
		}else repVar = txtBlk.getText();
		String testStat = testStatistics[cmboTestStat.getSelectionIndex()]; 
		String descriptive = "FALSE";
		String correlate = "FALSE";
		String doNormalTest = "FALSE";
		String doBoxM = "FALSE";
		String doSphericity = "FALSE";
		String saveSSH = "FALSE";
		String saveSSE = "FALSE";

		descriptive = String.valueOf(btnStatRespVars.getSelection()).toUpperCase();
//		correlate = String.valueOf(btnPairwise.getSelection()).toUpperCase();
		doNormalTest = String.valueOf(btnShapiroWilk.getSelection()).toUpperCase();
		doBoxM = String.valueOf(btnBoxM.getSelection()).toUpperCase();	
		doSphericity = String.valueOf(btnBartletts.getSelection()).toUpperCase();
		saveSSH = String.valueOf(btnSSHypo.getSelection()).toUpperCase();
		saveSSE = String.valueOf(btnSSError.getSelection()).toUpperCase();

		
		if(lstResponseVariables.getItemCount()<2){
			MessageDialog.openError(getShell(), "Error", "Please add at least two response variables.");
			return;
		}
		if(txtFactor.getText().isEmpty()){
			MessageDialog.openError(getShell(), "Error", "Please add a factor variable.");
			return;
		}
		if(txtBlk.getText().isEmpty() && cmbDesign.getSelectionIndex()==1){
			MessageDialog.openError(getShell(), "Error", "Please add a block variable.");
			return;
		}
		
		OperationProgressDialog rInfo = new OperationProgressDialog(
				getShell(), "Performing Analysis");
		rInfo.open();
		btnOkay.setEnabled(false);
		
		StarAnalysisUtilities.testVarArgs(
				dataFileName, 
				outputPath.replace(File.separator, "/"),
				yVars, 
				factorVar, 
				repVar, 
				testStat,
				descriptive, 
				correlate,
				doNormalTest, 
				doBoxM,
				doSphericity, 
				saveSSH, 
				saveSSE);
		ProjectExplorerView.rJavaManager.getSTARAnalysisManager().doManova(
				dataFileName, 
				outputPath.replace(File.separator, "/"),
				yVars, 
				factorVar, 
				repVar, 
				testStat,
				descriptive, 
				correlate,
				doNormalTest, 
				doBoxM,
				doSphericity, 
				saveSSH, 
				saveSSE);

		this.getShell().setMinimized(true);
		StarAnalysisUtilities.openAndRefreshFolder(outputPath);
		btnOkay.setEnabled(true);
		rInfo.close();
	}
	
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.RETRY_ID, "Reset", false);
		btnOkay = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
						IDialogConstants.CANCEL_LABEL, false);		
	}
	
	/**    
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(534, 468);
	}
	
	public class manovaValidate extends DialogListValidator{
		Combo cmbDesign;
		Button btnAddBlk;
		public manovaValidate( Combo cmbDesign, Button btnAddBlk) {
			super();
			this.btnAddBlk = btnAddBlk;
			this.cmbDesign = cmbDesign;
			// TODO Auto-generated constructor stub
		}
		
		@Override
		public boolean validate(){
			btnAddBlk.setEnabled(! cmbDesign.getText().equals("Completely Randomized Design (CRD)"));
			return ! cmbDesign.getText().equals("Completely Randomized Design (CRD)");
			
		}
	}
	
}
