package org.irri.breedingtool.graphs.dialog;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.TreeItem;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.application.model.ProjectExplorerTreeNodeModel;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.manager.impl.DataManipulationManager;
import org.irri.breedingtool.manager.impl.ProjectExplorerManager;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.GraphsUtilities;
import org.irri.breedingtool.utility.PBToolAnalysisUtilities;
import org.irri.breedingtool.utility.WindowDialogControlUtil;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.wb.swt.ResourceManager;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.widgets.Spinner;

public class HistogramDialog extends Dialog {

	private ArrayList<String> varInfo;
	private List numVarList;
	private List factorVarList;
	private List responseVarList;
	private Button addBtn;
	private Button moveBtn;
	private String[] numericVariables;
	private String[] factorVariables;
	private File file;
	private DataManipulationManager dataManipulationManager = new DataManipulationManager();

	//specify parameters
	private String[] nVar = null; //but should be provided by user
	private String mTitle = null; 
	private String yAxisLab = null; 
	private String xAxisLab = null;
	private String xMinValue = null; 
	private String xMaxValue = null;
	private String yMinValue = null; 
	private String yMaxValue = null;
	private String useFreq = "FALSE"; //"TRUE"; // 
	private String numBins = "Auto"; //for "Sturges" or integer
	private String byVar = null;
	private String showLeg = "FALSE";
	private String legPos = "bottomright"; //"bottomright" if showLeg = "TRUE"
	private String legTitle = null;   
	private String legHoriz = "FALSE";
	private String boxed = "FALSE"; 
	private String multGraphs = "FALSE";
	private int numRowsGraphs = 1;
	private int numColsGraphs = 1;
	private String orientGraphs = "top-bottom";
	private int axisLabelStyle = 1;
	
	private String[] barColors = {"rgb(255,0,255, max = 255, alpha = 127)","rgb(0,255,0, max = 255, alpha = 127)"}; 
	private String dispCurve = "TRUE"; //"FALSE"; //
	private String[] lineColors = {"rgb(0,0,0, max = 255)","rgb(0,0,255, max = 255)"};
	private int[] lineTypes = {1, 2, 3}; //{1 for all lines, possible values 1 to 6 - see diagram};
	private double[] lineWidths = {1,1,1}; //{1 for all lines, possible values 0.5 to 3, increment: 0.5};

	private String analysisType;
	private Button addGroupsBtn;
	private List groupsVarList;
	private Text mainTitleText;
	private Text categoryAxisText;
	private Text valueAxisText;
	private Text lowerLimitY;
	private Text upperLimitY;
	private Text legTitleText;
	private Table table;
	private TabItem tbtmDisplay;
	private Button btnDrawBoxAround;
	private Button btnShowLegend;
	private Button btnDisplayMultipleGraphs;
	private CCombo legPositionComo;
	private Spinner numRowsSpinner;
	private Spinner numColsSpinner;
	private CCombo orientGraphsCombo;
	private Label lblPosition;
	private Label lblTitle;
	private Label lblNewLabel;
	private Label lblOrientation;
	private Label lblNumberOfColumns;
	private Composite composite;
	private Label lblRange;
	private Label lblLabel;
	private Label label;
	private Label label_1;
	private Text lowerLimitX;
	private Label label_2;
	private Text upperLimitX;
	private Label label_3;
	private Button btnFrequency;
	private Button btnProbabilityDensities;
	private Label lblUse;
	private Button btnOverlayKernelDensity;
	private Label lblNumberOfBars;
	private Text txtNumBars;
	private Shell parentShell;
	private Label lblNewLabel_1;
	private CCombo cmboAxisOrientation;
	private Label lblAlignment;
	private Combo cmboAlignment;
	private Label label_4;

	/**
	 * Create the dialog.
	 * @param parentShell
	 */
	public HistogramDialog(Shell parentShell, String analysisType, File file) {
		super(parentShell);
		setShellStyle(SWT.BORDER | SWT.CLOSE | SWT.MIN | SWT.RESIZE);
		setBlockOnOpen(false);
		this.parentShell = parentShell;
		this.analysisType = analysisType;
		this.file=file;
		setFactors();
	}

	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		getShell().setData("analysis", analysisType);
		getShell().setData("filePathID",file.getAbsolutePath());
		WindowDialogControlUtil.addWindowDialogToList(getShell());

		parent.addDisposeListener(new DisposeListener(){
			@Override
			public void widgetDisposed(DisposeEvent e) {
				// TODO Auto-generated method stub
				WindowDialogControlUtil.removeWindowDialogToList(getShell());
			}

		});

		parent.getShell().setText("Histogram: "+dataManipulationManager.getDisplayFileName(file.getAbsolutePath()));
		Composite container = (Composite) super.createDialogArea(parent);

		TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));

		TabItem tbtmModelSpecifications_1 = new TabItem(tabFolder, SWT.NONE);
		tbtmModelSpecifications_1.setText("Variable Definition");

		Composite modelComposite = new Composite(tabFolder, SWT.NONE);
		tbtmModelSpecifications_1.setControl(modelComposite);
		modelComposite.setLayout(new GridLayout(5, false));

		Label lblNumericVariables = new Label(modelComposite, SWT.NONE);
		lblNumericVariables.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		lblNumericVariables.setText("Numeric Variables:");
		new Label(modelComposite, SWT.NONE);
		new Label(modelComposite, SWT.NONE);

		Label lblResponseVariables = new Label(modelComposite, SWT.NONE);
		lblResponseVariables.setText("Variable(s):");

		numVarList = new List(modelComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_numVarList = new GridData(SWT.FILL, SWT.FILL, true, false, 2, 1);
		gd_numVarList.heightHint = 95;
		gd_numVarList.widthHint = 126;
		numVarList.setLayoutData(gd_numVarList);
		numVarList.setItems(numericVariables);
		numVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				//				List list=(List) e.getSource();
				String selectedNumVars[] = numVarList.getSelection();
				addItemToVarTable(selectedNumVars[0]);
				dataManipulationManager.moveSelectedStringFromTo( numVarList, responseVarList);
				numVarList.remove(numVarList.getSelectionIndices());
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(numVarList.getSelectionCount()>0){
					moveBtn.setEnabled(true);
					factorVarList.setSelection(-1);
					responseVarList.setSelection(-1);
					addBtn.setText("Add");
					moveBtn.setText("Set to Factor");
					enableFactorButtons(false);
					enableNumericButtons(true);

				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});

		addBtn = new Button(modelComposite, SWT.NONE);
		addBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(numVarList.getSelectionCount()>0) {//if the purpose is to add
					String selectedNumVars[] = numVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						addItemToVarTable(selectedNumVars[i]);
						responseVarList.add(selectedNumVars[i]);
					}
					numVarList.remove(numVarList.getSelectionIndices());
				}
				else{//if the purpose is to remove
					String selectedNumVars[] = responseVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						removeItemFromVarTable(selectedNumVars[i]);
						numVarList.add(selectedNumVars[i]);
					}
					responseVarList.remove(responseVarList.getSelectionIndices());
				}
				enableNumericButtons(false);
			}
		});
		addBtn.setEnabled(false);
		GridData gd_addBtn = new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1);
		gd_addBtn.widthHint = 52;
		addBtn.setLayoutData(gd_addBtn);
		addBtn.setText("Add");

		responseVarList = new List(modelComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_responseVarList = new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1);
		gd_responseVarList.widthHint = 111;
		responseVarList.setLayoutData(gd_responseVarList);
		responseVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				removeItemFromVarTable(responseVarList.getSelection()[0]);
				dataManipulationManager.moveSelectedStringFromTo( responseVarList, numVarList);
				responseVarList.remove(responseVarList.getSelectionIndices());
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(responseVarList.getSelectionCount()>0){
					numVarList.setSelection(-1);
					addBtn.setText("Remove");
					addBtn.setEnabled(true);
					moveBtn.setEnabled(false);
					enableFactorButtons(false);
				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});

		Label lblFactors = new Label(modelComposite, SWT.NONE);
		lblFactors.setText("Factors:");

		moveBtn = new Button(modelComposite, SWT.NONE);
		moveBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e){
				if(numVarList.getSelectionCount()>0){//if move Down
					String selectedNumVars[] = numVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						factorVarList.add(selectedNumVars[i]);
						dataManipulationManager.editVariableType(file.getAbsolutePath(),varInfo, selectedNumVars[i],"Factor");
					}
					numVarList.remove(numVarList.getSelectionIndices());
					enableNumericButtons(false);
				}
				else{// move up
					String selectedNumVars[] = factorVarList.getSelection();
					for(int i=0; i< selectedNumVars.length; i++){
						numVarList.add(selectedNumVars[i]);
						dataManipulationManager.editVariableType(file.getAbsolutePath(),varInfo, selectedNumVars[i],"Numeric");
					}
					factorVarList.remove(factorVarList.getSelectionIndices());

					enableFactorButtons(false);
				}
			}
		});
		moveBtn.setEnabled(false);
		GridData gd_moveBtn = new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1);
		gd_moveBtn.heightHint = 24;
		gd_moveBtn.widthHint = 90;
		moveBtn.setLayoutData(gd_moveBtn);
		moveBtn.setText("Set to Factor");
		new Label(modelComposite, SWT.NONE);
		new Label(modelComposite, SWT.NONE);
		
				Label lblGroupBy = new Label(modelComposite, SWT.NONE);
				lblGroupBy.setText("Group by:");
		
				factorVarList = new List(modelComposite, SWT.BORDER | SWT.V_SCROLL);
				GridData gd_factorVarList = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
				gd_factorVarList.widthHint = 65;
				factorVarList.setLayoutData(gd_factorVarList);
				factorVarList.setItems(factorVariables);
				factorVarList.addListener(SWT.MouseDown, new Listener(){

					@Override
					public void handleEvent(Event event) {
						if(factorVarList.getSelectionIndex()>-1){
							enableNumericButtons(false);
							enableFactorButtons(false);
							numVarList.setSelection(-1);
							String[] s=factorVarList.getSelection();
							String isNumeric = dataManipulationManager.isNumeric(file.getAbsolutePath().replaceAll("\\\\","/"), s[0]);
							if(isNumeric.equals("TRUE")){
								moveBtn.setText("Set to Numeric");
								moveBtn.setEnabled(true);
							}
							else moveBtn.setEnabled(false);
							enableFactorButtons(true);

						}
					}
				});

		addGroupsBtn = new Button(modelComposite, SWT.NONE);
		addGroupsBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(factorVarList.getSelectionCount()>0) {//if the purpose is to add
					dataManipulationManager.moveSelectedStringFromTo( factorVarList, groupsVarList);
				}
				else{//if the purpose is to remove
					dataManipulationManager.moveSelectedStringFromTo( groupsVarList, factorVarList);
				}
				enableFactorButtons(false);
			}
		});
		GridData gd_addGroupsBtn = new GridData(SWT.LEFT, SWT.TOP, false, false, 2, 1);
		gd_addGroupsBtn.widthHint = 52;
		addGroupsBtn.setLayoutData(gd_addGroupsBtn);
		addGroupsBtn.setText("Add");
		addGroupsBtn.setEnabled(false);

		groupsVarList = new List(modelComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.MULTI);
		GridData gd_groupsVarList = new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1);
		gd_groupsVarList.heightHint = 5;
		groupsVarList.setLayoutData(gd_groupsVarList);
		groupsVarList.addMouseListener(new MouseListener(){
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
				dataManipulationManager.moveSelectedStringFromTo( groupsVarList, factorVarList);
				addGroupsBtn.setEnabled(false);
			}

			@Override
			public void mouseDown(MouseEvent e) {
				// TODO Auto-generated method stub
				if(groupsVarList.getSelectionCount()>0){
					factorVarList.setSelection(-1);
					addGroupsBtn.setText("Remove");
					addGroupsBtn.setEnabled(true);
				}
			}

			@Override
			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub

			}
		});

		tbtmDisplay = new TabItem(tabFolder, SWT.NONE);
		tbtmDisplay.setText("Display Options");

		Composite composite_2 = new Composite(tabFolder, SWT.NONE);
		tbtmDisplay.setControl(composite_2);
		composite_2.setLayout(new GridLayout(6, false));
				new Label(composite_2, SWT.NONE);
		
				Label lblMainTitle = new Label(composite_2, SWT.NONE);
				lblMainTitle.setText("Main Title:");

		mainTitleText = new Text(composite_2, SWT.BORDER);
		mainTitleText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 4, 1));
				
						label_3 = new Label(composite_2, SWT.NONE);
						label_3.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
						label_3.setText("X-Axis:");
		new Label(composite_2, SWT.NONE);
						
						label_4 = new Label(composite_2, SWT.NONE);
						label_4.setText("Label:");
						label_4.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
				
						categoryAxisText = new Text(composite_2, SWT.BORDER);
						categoryAxisText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 3, 1));
				new Label(composite_2, SWT.NONE);
														new Label(composite_2, SWT.NONE);
												
														label = new Label(composite_2, SWT.NONE);
														label.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
														label.setText("Range:");
										
												label_1 = new Label(composite_2, SWT.NONE);
												label_1.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
												label_1.setText("Lower Limit:");
								
										lowerLimitX = new Text(composite_2, SWT.BORDER);
										lowerLimitX.setText("Auto");
										lowerLimitX.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
										GraphsUtilities.addTextModifyListener(lowerLimitX);
						
								label_2 = new Label(composite_2, SWT.NONE);
								label_2.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
								label_2.setText("Upper Limit:");
				
						upperLimitX = new Text(composite_2, SWT.BORDER);
						upperLimitX.setText("Auto");
						upperLimitX.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
						GraphsUtilities.addTextModifyListener(upperLimitX);
				
						Label lblValueAxisLabel = new Label(composite_2, SWT.NONE);
						lblValueAxisLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
						lblValueAxisLabel.setText("Y-Axis:");
		new Label(composite_2, SWT.NONE);

		lblLabel = new Label(composite_2, SWT.NONE);
		lblLabel.setText("Label:");
		lblLabel.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));

		valueAxisText = new Text(composite_2, SWT.BORDER);
		valueAxisText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 4, 1));
		new Label(composite_2, SWT.NONE);

		lblUse = new Label(composite_2, SWT.NONE);
		lblUse.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblUse.setText("Use:");

		btnFrequency = new Button(composite_2, SWT.RADIO);
		btnFrequency.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnFrequency.getSelection()){
					btnOverlayKernelDensity.setSelection(false);
					btnProbabilityDensities.setSelection(false);
					enableOverlayDensityOptions(false);
				}
			}
		});
		btnFrequency.setSelection(true);
		btnFrequency.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false, 2, 1));
		btnFrequency.setText("frequencies");

		btnProbabilityDensities = new Button(composite_2, SWT.RADIO);
		btnProbabilityDensities.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnProbabilityDensities.getSelection()){
					btnFrequency.setSelection(false);
				}
			}
		});
		btnProbabilityDensities.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		btnProbabilityDensities.setText("probability densities");
		new Label(composite_2, SWT.NONE);

		lblRange = new Label(composite_2, SWT.NONE);
		lblRange.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblRange.setText("Range:");

		Label lblLowerLimit = new Label(composite_2, SWT.NONE);
		lblLowerLimit.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1));
		lblLowerLimit.setText("Lower Limit:");

		lowerLimitY = new Text(composite_2, SWT.BORDER);
		lowerLimitY.setText("Auto");
		lowerLimitY.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		GraphsUtilities.addTextModifyListener(lowerLimitY);

		Label lblLimit = new Label(composite_2, SWT.NONE);
		lblLimit.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblLimit.setText("Upper Limit:");

		upperLimitY = new Text(composite_2, SWT.BORDER);
		upperLimitY.setText("Auto");
		upperLimitY.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		GraphsUtilities.addTextModifyListener(upperLimitY);
		
		lblNewLabel_1 = new Label(composite_2, SWT.NONE);
		lblNewLabel_1.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 3, 1));
		lblNewLabel_1.setText("Axis Label Orientation:");
		
		cmboAxisOrientation = new CCombo(composite_2, SWT.BORDER | SWT.READ_ONLY);
		GridData gd_cmboAxisOrientation = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_cmboAxisOrientation.widthHint = 193;
		cmboAxisOrientation.setLayoutData(gd_cmboAxisOrientation);
		cmboAxisOrientation.setItems(new String[] {"parallel to axis", "horizontal", "vertical", "perpendicular to axis"});
		cmboAxisOrientation.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		cmboAxisOrientation.select(0);
		new Label(composite_2, SWT.NONE);
		new Label(composite_2, SWT.NONE);
				
						btnDrawBoxAround = new Button(composite_2, SWT.CHECK);
						btnDrawBoxAround.setSelection(true);
						btnDrawBoxAround.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
						btnDrawBoxAround.setText("Draw box around plot");
				
						btnShowLegend = new Button(composite_2, SWT.CHECK);
						btnShowLegend.addSelectionListener(new SelectionAdapter() {
							@Override
							public void widgetSelected(SelectionEvent e) {
								if(btnShowLegend.getSelection()) enableShowLegend(true);
								else enableShowLegend(false);
							}
						});
						btnShowLegend.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
						btnShowLegend.setText("Show legend");
		new Label(composite_2, SWT.NONE);
		new Label(composite_2, SWT.NONE);

		lblPosition = new Label(composite_2, SWT.NONE);
		lblPosition.setEnabled(false);
		lblPosition.setText("Position:");

		legPositionComo = new CCombo(composite_2, SWT.BORDER | SWT.READ_ONLY);
		legPositionComo.setEnabled(false);
		legPositionComo.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		legPositionComo.setEditable(false);
		legPositionComo.setItems(new String[] {"bottom", "bottom-left", "bottom-right", "center", "left", "right", "top", "top-left", "top-right"});
		GridData gd_legPositionComo = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_legPositionComo.widthHint = 193;
		legPositionComo.setLayoutData(gd_legPositionComo);
		legPositionComo.select(2);
		
		lblAlignment = new Label(composite_2, SWT.NONE);
		lblAlignment.setEnabled(false);
		lblAlignment.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblAlignment.setText("Alignment:");
		
		cmboAlignment = new Combo(composite_2, SWT.READ_ONLY);
		cmboAlignment.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		cmboAlignment.setEnabled(false);
		cmboAlignment.setItems(new String[] {"vertical", "horizontal"});
		cmboAlignment.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		cmboAlignment.select(0);
		new Label(composite_2, SWT.NONE);
		new Label(composite_2, SWT.NONE);

		lblTitle = new Label(composite_2, SWT.NONE);
		lblTitle.setEnabled(false);
		lblTitle.setText("Title:");

		legTitleText = new Text(composite_2, SWT.BORDER);
		legTitleText.setEnabled(false);
		legTitleText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 3, 1));
				
						btnDisplayMultipleGraphs = new Button(composite_2, SWT.CHECK);
						btnDisplayMultipleGraphs.addSelectionListener(new SelectionAdapter() {
							@Override
							public void widgetSelected(SelectionEvent e) {
								if(btnDisplayMultipleGraphs.getSelection()) displayMultipleGraphs(true);
								else displayMultipleGraphs(false);
							}
						});
						
								btnDisplayMultipleGraphs.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 6, 1));
								btnDisplayMultipleGraphs.setText("Display multiple graphs in a page");
		new Label(composite_2, SWT.NONE);
		new Label(composite_2, SWT.NONE);

		lblNewLabel = new Label(composite_2, SWT.NONE);
		lblNewLabel.setEnabled(false);
		lblNewLabel.setText("Number of rows:");

		numRowsSpinner = new Spinner(composite_2, SWT.BORDER);
		numRowsSpinner.setMaximum(5);
		numRowsSpinner.setMinimum(1);
		numRowsSpinner.setSelection(2);
		numRowsSpinner.setEnabled(false);

		lblNumberOfColumns = new Label(composite_2, SWT.NONE);
		lblNumberOfColumns.setEnabled(false);
		lblNumberOfColumns.setText("Number of columns:");

		numColsSpinner = new Spinner(composite_2, SWT.BORDER);
		numColsSpinner.setMaximum(5);
		numColsSpinner.setMinimum(1);
		numColsSpinner.setSelection(1);
		numColsSpinner.setEnabled(false);
		new Label(composite_2, SWT.NONE);
		new Label(composite_2, SWT.NONE);

		lblOrientation = new Label(composite_2, SWT.NONE);
		lblOrientation.setEnabled(false);
		lblOrientation.setText("Orientation:");

		orientGraphsCombo = new CCombo(composite_2, SWT.BORDER | SWT.READ_ONLY);
		orientGraphsCombo.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		orientGraphsCombo.setEditable(false);
		orientGraphsCombo.setEnabled(false);
		orientGraphsCombo.setItems(new String[] {"Left-to-right", "Top-to-bottom"});
		orientGraphsCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 3, 1));
		orientGraphsCombo.select(0);
		TabItem tbtmBars = new TabItem(tabFolder, SWT.NONE);
		tbtmBars.setText("Other Options");

		composite = new Composite(tabFolder, SWT.NONE);
		tbtmBars.setControl(composite);
		composite.setLayout(new GridLayout(5, false));

		lblNumberOfBars = new Label(composite, SWT.NONE);
		lblNumberOfBars.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 4, 1));
		lblNumberOfBars.setText("Number of bars:");

		txtNumBars = new Text(composite, SWT.BORDER);
		txtNumBars.setText("Auto");
		txtNumBars.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));

		btnOverlayKernelDensity = new Button(composite, SWT.CHECK);
		btnOverlayKernelDensity.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnOverlayKernelDensity.getSelection()){
					btnFrequency.setSelection(false);
					btnProbabilityDensities.setSelection(true);
					enableOverlayDensityOptions(true);
				}
				else enableOverlayDensityOptions(false);
			}
		});
		btnOverlayKernelDensity.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 5, 1));
		btnOverlayKernelDensity.setText("Overlay kernel density estimates");

		Label lblPlot = new Label(composite, SWT.NONE);
		lblPlot.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 5, 1));
		lblPlot.setText("Format Components:");

		table = new Table(composite, SWT.BORDER | SWT.NO_FOCUS | SWT.HIDE_SELECTION);
		table.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 5, 1));
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		table.setRedraw(true);

		TableColumn tableColumn_1 = new TableColumn(table, SWT.NONE);
		tableColumn_1.setWidth(75);
		tableColumn_1.setText("Variable");

		TableColumn tableColumn_2 = new TableColumn(table, SWT.NONE);
		tableColumn_2.setWidth(75);
		tableColumn_2.setText("Bar Color");

		TableColumn tableColumn_3 = new TableColumn(table, SWT.NONE);
		tableColumn_3.setWidth(25);

		TableColumn tblclmnLine = new TableColumn(table, SWT.NONE);
		tblclmnLine.setWidth(75);
		tblclmnLine.setText("Line Type");

		TableColumn tableColumn_4 = new TableColumn(table, SWT.NONE);
		tableColumn_4.setWidth(25);

		TableColumn tableColumn_5 = new TableColumn(table, SWT.NONE);
		tableColumn_5.setWidth(75);
		tableColumn_5.setText("Line Color");

		TableColumn tableColumn_6 = new TableColumn(table, SWT.NONE);
		tableColumn_6.setWidth(25);

		TableColumn tblclmnWidth = new TableColumn(table, SWT.NONE);
		tblclmnWidth.setWidth(60);
		tblclmnWidth.setText("Width");


		enableOverlayDensityOptions(false);
		return container;

	}
	
	protected void enableOverlayDensityOptions(boolean state) {
		// TODO Auto-generated method stub

		for(int i=0; i<table.getItemCount(); i++){
			TableItem tableItem = table.getItem(i);
					
			TableEditor tableEditors[]= (TableEditor[]) tableItem.getData("Editors");

			for(int col=1; col<tableEditors.length; col++){
				TableEditor e = tableEditors[col];
				e.getEditor().setEnabled(state);
			}
		}

	}


	protected void displayMultipleGraphs(boolean state) {
		// TODO Auto-generated method stub
		orientGraphsCombo.setEnabled(state);
		lblOrientation.setEnabled(state);
		lblNewLabel.setEnabled(state);
		numRowsSpinner.setEnabled(state);
		lblNumberOfColumns.setEnabled(state);
		numColsSpinner.setEnabled(state);
	}

	protected void enableShowLegend(boolean state) {
		// TODO Auto-generated method stub
		// TODO Auto-generated method stub
		lblPosition.setEnabled(state);
		legTitleText.setEnabled(state);
		lblTitle.setEnabled(state);
		legPositionComo.setEnabled(state);
		cmboAlignment.setEnabled(state);
		lblAlignment.setEnabled(state);
	}

	protected void removeItemFromVarTable(String varName) {
		// TODO Auto-generated method stub
		int item=0;
		for(int i=0;i<table.getItemCount(); i++){
			if(varName.equals(table.getItem(i).getText(0)))item = i;
		}
		System.out.println(varName+"'s index is: "+Integer.toString(item));
		TableItem tableItem = table.getItem(item);
		TableEditor[] editors = (TableEditor[])tableItem.getData("Editors");
		for(TableEditor te : editors){
			te.getEditor().dispose();
		}
		
		table.remove(item);
		table.pack();
		composite.pack();
	}

	protected void addItemToVarTable(String varName) {
		// TODO Auto-generated method stub
		final RGB[] colors = GraphsUtilities.getGrayShades(table.getItemCount()+1);
		final TableItem tableItem = new TableItem(table, SWT.CENTER);
		tableItem.setText(0, varName);

		TableEditor[] tableEditors = new TableEditor[5];
		tableEditors[0] = new TableEditor(table);//color chooser button
		tableEditors[1] = new TableEditor(table);//lineType
		tableEditors[2] = new TableEditor(table);//lineType chooser button
		tableEditors[3] = new TableEditor(table);//line chooser button
		tableEditors[4] = new TableEditor(table);//width spinner

		//bar Color
		GraphsUtilities.refreshTableColors(table, 1, colors);
//		tableItem.setBackground(1, Display.getCurrent().getSystemColor(SWT.COLOR_GRAY));

		//color chooser button
		Button chooseColorButton = new Button(table, SWT.NONE | SWT.CENTER);
		chooseColorButton.setImage(ResourceManager.getPluginImage("Star", "icons/ellipsis.png"));
		chooseColorButton.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
		chooseColorButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				table.setSelection(-1);
				try{
					RGB rgbColor = GraphsUtilities.chooseColor();
					tableItem.setBackground(1, new Color(Display.getCurrent(), rgbColor));
				}catch(Exception ex){
					System.out.println("Exception at RGB choose color");
				}
			}
		});

		//line type
		final Label lineLabel = new Label(table, SWT.BORDER | SWT.CENTER);
		lineLabel.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_BACKGROUND));
		lineLabel.setImage(ResourceManager.getPluginImage("Star", "icons/line1.png"));
		lineLabel.setData("lineType", Integer.parseInt("1"));

		//linetype chooser button
		Button chooseLineButton = new Button(table,SWT.NONE | SWT.CENTER);
		chooseLineButton.setImage(ResourceManager.getPluginImage("Star", "icons/ellipsis.png"));
		chooseLineButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ChooseLineTypesDialog lineDlg = new ChooseLineTypesDialog(getShell());
				lineDlg.open();
				if(lineDlg.getReturnCode()==0){
					lineLabel.setImage(ResourceManager.getPluginImage("Star", "icons/line"+lineDlg.getChosenPattern()+".png"));
					lineLabel.setData("lineType", Integer.parseInt(lineDlg.getChosenPattern()));
				}
			}
		});

		//line color
		GraphsUtilities.refreshTableColors(table, 5, colors);
//		tableItem.setBackground(5, Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));	

		//line color chooser button
		Button lineColorButton = new Button(table, SWT.NONE | SWT.CENTER);
		lineColorButton.setImage(ResourceManager.getPluginImage("Star", "icons/ellipsis.png"));
		lineColorButton.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));
		lineColorButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				table.setSelection(-1);
				try{
					RGB rgbColor = GraphsUtilities.chooseColor();
					tableItem.setBackground(5, new Color(Display.getCurrent(), rgbColor));
				}catch(Exception ex){
					System.out.println("Exception at RGB choose color");
				}
			}
		});

		Spinner widthValue = new Spinner(table, SWT.BORDER);
		widthValue.setMaximum(30);
		widthValue.setMinimum(5);
		widthValue.setSelection(10);
		widthValue.setDigits(1);

		tableEditors[0].grabHorizontal = true;
		tableEditors[1].grabHorizontal = true;
		tableEditors[2].grabHorizontal = true;
		tableEditors[3].grabHorizontal = true;
		tableEditors[4].grabHorizontal = true;

		tableEditors[0].setEditor(chooseColorButton, tableItem, 2);
		tableEditors[1].setEditor(lineLabel, tableItem, 3);
		tableEditors[2].setEditor(chooseLineButton, tableItem, 4);
		tableEditors[3].setEditor(widthValue, tableItem, 7);
		tableEditors[4].setEditor(lineColorButton, tableItem, 6);

		tableItem.setData("Editors", tableEditors);
		
		table.pack();
		composite.pack();
		
		enableOverlayDensityOptions(btnOverlayKernelDensity.getSelection());
	}

	protected void setFactors() {
		// TODO Auto-generated method stub
		varInfo=dataManipulationManager.getVarInfoFromFile(file.getAbsolutePath());
		numericVariables=dataManipulationManager.getNumericVars(varInfo);
		factorVariables=dataManipulationManager.getFactorVars(varInfo);
	}

	public void enableFactorButtons(boolean state){
		groupsVarList.setSelection(-1);

		addGroupsBtn.setEnabled(state);
		if(state){
			addGroupsBtn.setText("Add");
			if(groupsVarList.getItemCount()>0)addGroupsBtn.setEnabled(false);
		}
	}

	public void enableNumericButtons(boolean state){
		addBtn.setEnabled(state);
		moveBtn.setEnabled(state);
	}
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.DESELECT_ALL_ID, "Reset", true);
		createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	@Override
	protected void buttonPressed(int buttonId) { //when Reset button is pressed
		if (buttonId == IDialogConstants.DESELECT_ALL_ID) {
			System.out.println("graph type: " + analysisType);
			HistogramDialog graph = new HistogramDialog(parentShell,analysisType,file);
			close();
			graph.open();
		}
		super.buttonPressed(buttonId);
	}
	
	@Override
	protected void okPressed(){
		if(responseVarList.getItemCount()<1) MessageDialog.openWarning(getShell(), "Enter Required Fields", "Please add variable(s) from the numeric variables list.");
		else{//if all conditions are satisfied
			nVar = responseVarList.getItems();
			mTitle = mainTitleText.getText(); //null; //
			yAxisLab = valueAxisText.getText(); //null; //value axis label
			xAxisLab = categoryAxisText.getText(); //null; //category axis label
			
			if(groupsVarList.getItemCount()<1)byVar = null;
			else byVar = groupsVarList.getItem(0);
			
			if(btnFrequency.getSelection())useFreq = "TRUE";
			else useFreq = "FALSE";
			
			if(lowerLimitY.getText().isEmpty() || lowerLimitY.getText().toLowerCase().equals("auto"))yMinValue = null; //"20";//
			else yMinValue = lowerLimitY.getText();
			
			//Y AXIS RANGE
			if(lowerLimitY.getText().isEmpty() || lowerLimitY.getText().toLowerCase().equals("auto"))yMinValue = null; //"20";//
			else yMinValue = lowerLimitY.getText();
			if(upperLimitY.getText().isEmpty() || upperLimitY.getText().toLowerCase().equals("auto"))yMaxValue = null; //"20";//
			else yMaxValue = upperLimitY.getText();
			
			//X AXIS RANGE
			if(lowerLimitX.getText().isEmpty() || lowerLimitX.getText().toLowerCase().equals("auto"))xMinValue = null; //"20";//
			else xMinValue = lowerLimitX.getText();
			if(upperLimitX.getText().isEmpty() || upperLimitX.getText().toLowerCase().equals("auto"))xMaxValue = null; //"20";//
			else xMaxValue = upperLimitX.getText();

			numBins = txtNumBars.getText();
			
			if(btnShowLegend.getSelection()){
				showLeg = "TRUE"; //"FALSE"; //
				legPos = legPositionComo.getText().replaceAll("-", ""); //eight other choices
				
				if(!legTitleText.getText().isEmpty())legTitle = legTitleText.getText(); //null; //
				else legTitle = null;
				
//				legTitle = legTitleText.getText(); //null; //
			}
			else{
				showLeg = "FALSE";
				legPos = null;
				legTitle = null;
			}
			
			if (cmboAlignment.getText().equals("horizontal")){
				legHoriz = "TRUE";
			}else legHoriz = "FALSE";

			axisLabelStyle = cmboAxisOrientation.getSelectionIndex();
			
			if(btnDrawBoxAround.getSelection()) boxed = "TRUE"; //
			else boxed = "FALSE"; //"TRUE"; //

			if(btnDisplayMultipleGraphs.getSelection()){
				multGraphs = "TRUE"; //"TRUE"; //
				numRowsGraphs = numRowsSpinner.getSelection();
				numColsGraphs = numColsSpinner.getSelection();
				orientGraphs = orientGraphsCombo.getText().replace("to-", "").toLowerCase();
			}
			else{
				multGraphs = "FALSE";
				numRowsGraphs = 1;
				numColsGraphs = 1;
				orientGraphs = "top-bottom";
			}

			barColors = new String[table.getItemCount()];
			lineColors = new String[table.getItemCount()];		
			lineTypes  = new int[table.getItemCount()];
			lineWidths  = new double[table.getItemCount()];

			int ctr=0;
			for(TableItem tableItem: table.getItems()){
				int index = ctr;
				TableEditor editors[]= (TableEditor[]) tableItem.getData("Editors"); 
				lineTypes[index] = ((Integer) editors[1].getEditor().getData("lineType")).intValue(); //{1 for all lines, possible values 1 to 6 - see diagram};
				lineWidths[index] = dataManipulationManager.convertInttoDouble(((Spinner) editors[3].getEditor()).getSelection(), 1); //{1 for all lines, possible values 1 to 6 - see diagram};; //{1 for all lines, possible values 0.5 to 3, increment: 0.5};
				barColors[index] = GraphsUtilities.convertToTransparentRrgbFormat(tableItem.getBackground(1).getRGB().toString());
				lineColors[index] = GraphsUtilities.convertToRrgbFormat(tableItem.getBackground(5).getRGB().toString());
				ctr++;
			}

			if(btnOverlayKernelDensity.getSelection())dispCurve = "TRUE";
			else dispCurve = "FALSE";			
			String dataFileName = file.getAbsolutePath().replaceAll("\\\\", "/");

			File outputFolder = GraphsUtilities.createOutputFolder(file.getName(), analysisType);
			if(!outputFolder.exists()) outputFolder.mkdir();

			OperationProgressDialog rInfo = new OperationProgressDialog(getShell(), "Creating Histogram");
			rInfo.open();
					
			ProjectExplorerView.rJavaManager.getRJavaGraphManager().createGraphHist(
					outputFolder.getAbsolutePath().replaceAll("\\\\", "/")+"/", dataFileName, nVar, mTitle,  
					yAxisLab, xAxisLab, yMinValue, yMaxValue, xMinValue, xMaxValue, useFreq, numBins, axisLabelStyle, byVar, 
			        barColors, dispCurve, lineTypes, lineColors, lineWidths, showLeg, legPos, legTitle, legHoriz, 
			        boxed, multGraphs, numRowsGraphs, numColsGraphs, orientGraphs);
			rInfo.close();
			WindowDialogControlUtil.hideAllWindowDialog();
			GraphsUtilities.openFolder(outputFolder);
		}
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(694, 545);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected boolean isResizable() {
		return true;
	}
}