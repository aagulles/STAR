package org.irri.breedingtool.graphs.dialog;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;

import org.eclipse.core.databinding.observable.DisposeEvent;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.Text;
import org.irri.breedingtool.application.handler.PartStackHandler;
import org.irri.breedingtool.datamanipulation.dialog.OperationProgressDialog;
import org.irri.breedingtool.graphs.managers.GraphTableManager;
import org.irri.breedingtool.projectexplorer.view.ProjectExplorerView;
import org.irri.breedingtool.utility.DialogFormUtility;
import org.irri.breedingtool.utility.DialogListValidator;
import org.irri.breedingtool.utility.GraphsUtilities;
import org.irri.breedingtool.utility.WindowDialogControlUtil;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;


public class NewBarGraphDialog extends Dialog {
	private String filePath = PartStackHandler.getActiveElementID();
	private DialogFormUtility listManager = new DialogFormUtility();
	private Button btnOkay;
	private Text txtCategorizedBy;
	private Text txtGroupBy;
	private Button btnRawData;
	private Button btnSummaryStatistics;
	private Combo cmbBarRepresents;
	private List lstNumericVariables;
	private List lstVariables;
	private Button btnSetToFactor;
	private Button btnVariables;
	private List lstFactors;
	private Button btnCategorizedBy;
	private Button btnClusterBarsBy;
	private List lstClusterBarsBy;
	private Button btnGroupBy;
	private Text txtMainTitle;
	private Text txtCategoryAxisLabel;
	private Table tblValueAxis;
	private Text txtLegendTitle;
	private Combo cmbOrientation;
	private Spinner sprTotalRows;
	private Spinner sprTotalColumns;
	private Button btnDisplayMultipleGraphs;
	private Combo cmboPosition;
	private Combo cmboAlignment;
	private Button btnDrawBoxAround;
	private Button btnShowLegend;
	private Combo cmbAxisLabelOrientation;
	private Button btnDisplayLevels;
	private Table tblColorAndFill;
	private Button btnDisplayErrorBars;
	private Button btnConfidenceLevel;
	private Spinner sprConfidenceLevel;
	private Spinner sprStandardErrorMultiplier;
	private Spinner sprStandardDeviationMultiplier;
	private Button btnStandardDeviation;
	private Button btnStandardError;
	private Button btnOrientationVertical;
	private Button btnOrientationHorizontal;
	private Button btnStyleClustered;
	private Button btnStyleStacked;
	private Label lblCategorizedBy;
	private Label lblGroupBy;
	private Label lblClusterBarsBy;
	private File dataFile;
	private String analysisType;
	private GraphTableManager tableManager;
	private Label lblPosition;
	private Label lblTitle;
	private Label lblAlignment;
	private Label lblNumberOfRows;
	private Label lblOrientation;
	private Label lblNumberOfColumns;
	private Group grpErrorBars;
	private Label lblLevel;
	private Label lblMultiplier;
	private Label lblMultiplier_1;

	/**
	 * Create the dialog.
	 * @param parentShell
	 * @param file2 
	 * @param string 
	 */
	public NewBarGraphDialog(Shell parentShell, String string, File file2) {
		super(parentShell);
		setShellStyle(SWT.BORDER | SWT.CLOSE | SWT.MIN | SWT.RESIZE);
		dataFile = file2;
	}
	protected void configureShell(Shell shell) {
		super.configureShell(shell);
		shell.setText("Bar Graph: " + new File(filePath).getName());
	}
	/**
	 * Create contents of the dialog.
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite container = (Composite) super.createDialogArea(parent);
		GridLayout gridLayout = (GridLayout) container.getLayout();
		
		TabFolder tabFolder = new TabFolder(container, SWT.NONE);
		tabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		TabItem tbtmVariableDefinition = new TabItem(tabFolder, SWT.NONE);
		tbtmVariableDefinition.setText("Variable Definition");
		
		Composite composite = new Composite(tabFolder, SWT.NONE);
		tbtmVariableDefinition.setControl(composite);
		composite.setLayout(new GridLayout(4, false));
		
		Label lblInputFileContains = new Label(composite, SWT.NONE);
		lblInputFileContains.setText("Input File Contains:");
		
		btnRawData = new Button(composite, SWT.RADIO);
		btnRawData.setSelection(true);
		btnRawData.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		btnRawData.setText("Raw Data");
		new Label(composite, SWT.NONE);
		
		btnSummaryStatistics = new Button(composite, SWT.RADIO);
		btnSummaryStatistics.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		btnSummaryStatistics.setText("Summary Statistics");
		
		Label lblBarRepresents = new Label(composite, SWT.NONE);
		lblBarRepresents.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblBarRepresents.setText("Bar Represents:");
		
		cmbBarRepresents = new Combo(composite, SWT.NONE);
		cmbBarRepresents.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (cmbBarRepresents.getSelectionIndex() == 1 && btnStyleClustered.getSelection()){
					btnDisplayErrorBars.setEnabled(true);
				}else{
					btnDisplayErrorBars.setEnabled(false);
				}
			}
		});
		cmbBarRepresents.setItems(new String[] {"Frequency", "Mean", "Median", "Sum"});
		cmbBarRepresents.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		cmbBarRepresents.select(1);
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		Label lblNumericVariables = new Label(composite, SWT.NONE);
		lblNumericVariables.setText("Numeric Variables:");
		new Label(composite, SWT.NONE);
		new Label(composite, SWT.NONE);
		
		Label lblVariables = new Label(composite, SWT.NONE);
		lblVariables.setText("Variable(s):");
		
		lstNumericVariables = new List(composite, SWT.BORDER | SWT.MULTI);
		lstNumericVariables.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		
		btnVariables = new Button(composite, SWT.NONE);
		GridData gd_btnVariables = new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1);
		gd_btnVariables.widthHint = 96;
		btnVariables.setLayoutData(gd_btnVariables);
		btnVariables.setText("Add");
		
		lstVariables = new List(composite, SWT.BORDER);
		GridData gd_lstVariables = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lstVariables.widthHint = 250;
		lstVariables.setLayoutData(gd_lstVariables);
		
		Label lblFactors = new Label(composite, SWT.NONE);
		lblFactors.setText("Factors:");
		
		btnSetToFactor = new Button(composite, SWT.NONE);
		btnSetToFactor.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		btnSetToFactor.setText("Set to Factor");
		new Label(composite, SWT.NONE);
		
		lblCategorizedBy = new Label(composite, SWT.NONE);
		lblCategorizedBy.setText("Categorized by:");
		
		lstFactors = new List(composite, SWT.BORDER | SWT.MULTI);
		lstFactors.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, true, 2, 5));
		
		btnCategorizedBy = new Button(composite, SWT.NONE);
		btnCategorizedBy.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		btnCategorizedBy.setText("Add");
		
		txtCategorizedBy = new Text(composite, SWT.BORDER);
		txtCategorizedBy.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		new Label(composite, SWT.NONE);
		
		lblClusterBarsBy = new Label(composite, SWT.NONE);
		lblClusterBarsBy.setText("Cluster bars by:");
		
		btnClusterBarsBy = new Button(composite, SWT.NONE);
		btnClusterBarsBy.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		btnClusterBarsBy.setText("Add");
		
		lstClusterBarsBy = new List(composite, SWT.BORDER);
		lstClusterBarsBy.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		new Label(composite, SWT.NONE);
		
		lblGroupBy = new Label(composite, SWT.NONE);
		lblGroupBy.setText("Group by:");
		
		btnGroupBy = new Button(composite, SWT.NONE);
		btnGroupBy.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		btnGroupBy.setText("Add");
		
		txtGroupBy = new Text(composite, SWT.BORDER);
		txtGroupBy.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		TabItem tbtmDisplayOptions = new TabItem(tabFolder, SWT.NONE);
		tbtmDisplayOptions.setText("Display Options");
		
		Composite composite_1 = new Composite(tabFolder, SWT.NONE);
		tbtmDisplayOptions.setControl(composite_1);
		composite_1.setLayout(new GridLayout(2, false));
		
		Label lblMainTitle = new Label(composite_1, SWT.NONE);
		lblMainTitle.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblMainTitle.setText("Main Title:");
		
		txtMainTitle = new Text(composite_1, SWT.BORDER);
		txtMainTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblCategoryAxisLabel = new Label(composite_1, SWT.NONE);
		lblCategoryAxisLabel.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblCategoryAxisLabel.setText("Category Axis Label:");
		
		txtCategoryAxisLabel = new Text(composite_1, SWT.BORDER);
		txtCategoryAxisLabel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		new Label(composite_1, SWT.NONE);
		
		btnDisplayLevels = new Button(composite_1, SWT.CHECK);
		btnDisplayLevels.setText("Display levels");
		
		Label lblValueAxis = new Label(composite_1, SWT.NONE);
		lblValueAxis.setText("Value Axis:");
		new Label(composite_1, SWT.NONE);
		
		tblValueAxis = new Table(composite_1, SWT.BORDER | SWT.FULL_SELECTION);
		GridData gd_tblValueAxis = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1);
		gd_tblValueAxis.heightHint = 100;
		tblValueAxis.setLayoutData(gd_tblValueAxis);
		tblValueAxis.setHeaderVisible(true);
		tblValueAxis.setLinesVisible(true);
		
		TableColumn tblclmnVariable = new TableColumn(tblValueAxis, SWT.CENTER);
		tblclmnVariable.setWidth(100);
		tblclmnVariable.setText("Variable");
		
		TableColumn tblclmnAxisLabel = new TableColumn(tblValueAxis, SWT.CENTER);
		tblclmnAxisLabel.setWidth(112);
		tblclmnAxisLabel.setText("Axis Label");
		
		TableColumn tblclmnLowerLimit = new TableColumn(tblValueAxis, SWT.CENTER);
		tblclmnLowerLimit.setWidth(144);
		tblclmnLowerLimit.setText("Lower Limit");
		
		TableColumn tblclmnUpperLimit = new TableColumn(tblValueAxis, SWT.CENTER);
		tblclmnUpperLimit.setWidth(171);
		tblclmnUpperLimit.setText("Upper Limit");
		
		Label lblAxisLabelOrientation = new Label(composite_1, SWT.NONE);
		lblAxisLabelOrientation.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblAxisLabelOrientation.setText("Axis label orientation:");
		
		cmbAxisLabelOrientation = new Combo(composite_1, SWT.READ_ONLY);
		cmbAxisLabelOrientation.setItems(new String[] {"parellel to axis", "horizontal", "vertical", "perpendicular to axis"});
		cmbAxisLabelOrientation.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		cmbAxisLabelOrientation.select(0);
		cmbAxisLabelOrientation.setText("parallel to axis");
		
		btnDrawBoxAround = new Button(composite_1, SWT.CHECK);
		btnDrawBoxAround.setText("Draw box around plot");
		new Label(composite_1, SWT.NONE);
		
		btnShowLegend = new Button(composite_1, SWT.CHECK);
		btnShowLegend.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnShowLegend.getSelection()){
					cmboPosition.setEnabled(true);
					txtLegendTitle.setEnabled(true);
					cmboAlignment.setEnabled(true);
					lblPosition.setEnabled(true);
					lblTitle.setEnabled(true);
					lblAlignment.setEnabled(true);
				}else {					
					cmboPosition.setEnabled(false);
					txtLegendTitle.setEnabled(false);
					cmboAlignment.setEnabled(false);
					lblPosition.setEnabled(false);
					lblTitle.setEnabled(false);
					lblAlignment.setEnabled(false);
				}
			}
		});
		btnShowLegend.setText("Show legend");
		new Label(composite_1, SWT.NONE);
		
		Composite composite_2 = new Composite(composite_1, SWT.NONE);
		composite_2.setLayout(new GridLayout(8, false));
		composite_2.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		new Label(composite_2, SWT.NONE);
		
		lblPosition = new Label(composite_2, SWT.NONE);
		lblPosition.setEnabled(false);
		lblPosition.setText("Position:");
		new Label(composite_2, SWT.NONE);
		
		cmboPosition = new Combo(composite_2, SWT.READ_ONLY);
		cmboPosition.setEnabled(false);
		cmboPosition.setItems(new String[] {"bottom", "bottom-left", "bottom-right", "center", "left", "right", "top", "top-left", "top-right"});
		cmboPosition.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		cmboPosition.select(2);
		new Label(composite_2, SWT.NONE);
		
		lblAlignment = new Label(composite_2, SWT.NONE);
		lblAlignment.setEnabled(false);
		lblAlignment.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblAlignment.setText("Alignment:");
		new Label(composite_2, SWT.NONE);
		
		cmboAlignment = new Combo(composite_2, SWT.READ_ONLY);
		cmboAlignment.setEnabled(false);
		cmboAlignment.setItems(new String[] {"vertical", "horizontal"});
		cmboAlignment.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		cmboAlignment.select(0);
		new Label(composite_2, SWT.NONE);
		
		lblTitle = new Label(composite_2, SWT.NONE);
		lblTitle.setEnabled(false);
		lblTitle.setText("Title:");
		new Label(composite_2, SWT.NONE);
		
		txtLegendTitle = new Text(composite_2, SWT.BORDER);
		txtLegendTitle.setEnabled(false);
		txtLegendTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 5, 1));
		
		btnDisplayMultipleGraphs = new Button(composite_1, SWT.CHECK);
		btnDisplayMultipleGraphs.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if(btnDisplayMultipleGraphs.getSelection()){
					sprTotalRows.setEnabled(true);
					cmbOrientation.setEnabled(true);
					sprTotalColumns.setEnabled(true);
					lblNumberOfRows.setEnabled(true);
					lblOrientation.setEnabled(true);
					lblNumberOfColumns.setEnabled(true);
				}else{
					sprTotalRows.setEnabled(false);
					cmbOrientation.setEnabled(false);
					sprTotalColumns.setEnabled(false);
					lblNumberOfRows.setEnabled(false);
					lblOrientation.setEnabled(false);
					lblNumberOfColumns.setEnabled(false);
				}
			}
		});
		btnDisplayMultipleGraphs.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));
		btnDisplayMultipleGraphs.setText("Display multiple graphs in a page");
		
		Composite composite_3 = new Composite(composite_1, SWT.NONE);
		composite_3.setLayout(new GridLayout(5, false));
		composite_3.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		new Label(composite_3, SWT.NONE);
		
		lblNumberOfRows = new Label(composite_3, SWT.NONE);
		lblNumberOfRows.setEnabled(false);
		lblNumberOfRows.setText("Number of rows:");
		
		sprTotalRows = new Spinner(composite_3, SWT.BORDER);
		sprTotalRows.setEnabled(false);
		
		lblNumberOfColumns = new Label(composite_3, SWT.RIGHT);
		lblNumberOfColumns.setEnabled(false);
		GridData gd_lblNumberOfColumns = new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1);
		gd_lblNumberOfColumns.widthHint = 183;
		lblNumberOfColumns.setLayoutData(gd_lblNumberOfColumns);
		lblNumberOfColumns.setText("Number of columns:");
		
		sprTotalColumns = new Spinner(composite_3, SWT.BORDER);
		sprTotalColumns.setEnabled(false);
		sprTotalColumns.setMinimum(1);
		new Label(composite_3, SWT.NONE);
		
		lblOrientation = new Label(composite_3, SWT.NONE);
		lblOrientation.setEnabled(false);
		lblOrientation.setText("Orientation:");
		
		cmbOrientation = new Combo(composite_3, SWT.NONE);
		cmbOrientation.setEnabled(false);
		cmbOrientation.setItems(new String[] {"Left-to-right", "Top-to-bottom"});
		GridData gd_cmbOrientation = new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1);
		gd_cmbOrientation.widthHint = 238;
		cmbOrientation.setLayoutData(gd_cmbOrientation);
		cmbOrientation.select(1);
		new Label(composite_3, SWT.NONE);
		new Label(composite_3, SWT.NONE);
		
		TabItem tbtmOtherOptions = new TabItem(tabFolder, SWT.NONE);
		tbtmOtherOptions.setText("Other Options");
		
		Composite composite_4 = new Composite(tabFolder, SWT.NONE);
		tbtmOtherOptions.setControl(composite_4);
		composite_4.setLayout(new GridLayout(3, false));
		
		Group grpConfigureBars = new Group(composite_4, SWT.NONE);
		grpConfigureBars.setLayout(new GridLayout(1, false));
		GridData gd_grpConfigureBars = new GridData(SWT.FILL, SWT.FILL, true, true, 2, 3);
		gd_grpConfigureBars.widthHint = 502;
		grpConfigureBars.setLayoutData(gd_grpConfigureBars);
		grpConfigureBars.setText("Configure Bars");
		
		Group grpOrientation = new Group(grpConfigureBars, SWT.NONE);
		grpOrientation.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpOrientation.setText("Orientation");
		grpOrientation.setLayout(new GridLayout(1, false));
		
		btnOrientationVertical = new Button(grpOrientation, SWT.RADIO);
		btnOrientationVertical.setSelection(true);
		btnOrientationVertical.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		btnOrientationVertical.setText("Vertical");
		
		btnOrientationHorizontal = new Button(grpOrientation, SWT.RADIO);
		btnOrientationHorizontal.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false, 1, 1));
		btnOrientationHorizontal.setText("Horizontal");
		
		Group grpStyle = new Group(grpConfigureBars, SWT.NONE);
		grpStyle.setLayout(new GridLayout(1, false));
		grpStyle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		grpStyle.setText("Style");
		
		btnStyleClustered = new Button(grpStyle, SWT.RADIO);
		btnStyleClustered.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (btnStyleClustered.getSelection() && cmbBarRepresents.getSelectionIndex() == 1){
					btnDisplayErrorBars.setEnabled(true);
				}else{
					btnDisplayErrorBars.setEnabled(false);
				}
			}
		});
		btnStyleClustered.setSelection(true);
		btnStyleClustered.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		btnStyleClustered.setText("Clustered");
		
		btnStyleStacked = new Button(grpStyle, SWT.RADIO);
		btnStyleStacked.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		btnStyleStacked.setText("Stacked");
		
		Group grpColorAndFill = new Group(grpConfigureBars, SWT.NONE);
		grpColorAndFill.setText("Color and Fill");
		grpColorAndFill.setLayout(new GridLayout(1, false));
		grpColorAndFill.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, true, 1, 1));
		
		tblColorAndFill = new Table(grpColorAndFill, SWT.BORDER | SWT.FULL_SELECTION);
		tblColorAndFill.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tblColorAndFill.setHeaderVisible(true);
		tblColorAndFill.setLinesVisible(true);
		
		TableColumn tblclmnLevel = new TableColumn(tblColorAndFill, SWT.NONE);
		tblclmnLevel.setWidth(143);
		tblclmnLevel.setText("Level");
		
		TableColumn tblclmnColor = new TableColumn(tblColorAndFill, SWT.NONE);
		tblclmnColor.setWidth(171);
		tblclmnColor.setText("Color");
		
		TableColumn tblclmnFillPattern = new TableColumn(tblColorAndFill, SWT.NONE);
		tblclmnFillPattern.setWidth(179);
		tblclmnFillPattern.setText("Fill Pattern");
		
		btnDisplayErrorBars = new Button(composite_4, SWT.CHECK);
		btnDisplayErrorBars.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (btnDisplayErrorBars.getSelection()){
					
					btnConfidenceLevel.setEnabled(true);
					if (btnConfidenceLevel.getSelection()){
						lblLevel.setEnabled(true);
						sprConfidenceLevel.setEnabled(true);
					}else{
						lblLevel.setEnabled(false);
						sprConfidenceLevel.setEnabled(false);
					}

					btnStandardError.setEnabled(true);
					if (btnStandardError.getSelection()){
						lblMultiplier.setEnabled(true);
						sprStandardErrorMultiplier.setEnabled(true);
					}else{
						lblMultiplier.setEnabled(false);
						sprStandardErrorMultiplier.setEnabled(false);
					}


					btnStandardDeviation.setEnabled(true);
					if (btnStandardDeviation.getSelection()){
						lblMultiplier_1.setEnabled(true);
						sprStandardDeviationMultiplier.setEnabled(true);	
					}else{
						lblMultiplier_1.setEnabled(false);
						sprStandardDeviationMultiplier.setEnabled(false);
					}
					
					
				}else{
					btnConfidenceLevel.setEnabled(false);
					lblLevel.setEnabled(false);
					sprConfidenceLevel.setEnabled(false);

					btnStandardError.setEnabled(false);
					lblMultiplier.setEnabled(false);
					sprStandardErrorMultiplier.setEnabled(false);

					btnStandardDeviation.setEnabled(false);
					lblMultiplier_1.setEnabled(false);
					sprStandardDeviationMultiplier.setEnabled(false);
				}
			}
		});
		btnDisplayErrorBars.setText("Display Error Bars");
		
		grpErrorBars = new Group(composite_4, SWT.NONE);
		grpErrorBars.setLayout(new GridLayout(3, false));
		grpErrorBars.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		grpErrorBars.setText("Error Bars");
				
		btnConfidenceLevel = new Button(grpErrorBars, SWT.RADIO);
		btnConfidenceLevel.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (btnConfidenceLevel.getSelection()){
					lblLevel.setEnabled(true);
					sprConfidenceLevel.setEnabled(true);
				}else{
					lblLevel.setEnabled(false);
					sprConfidenceLevel.setEnabled(false);
				}
			}
		});
		btnConfidenceLevel.setEnabled(false);
		btnConfidenceLevel.setSelection(true);
		btnConfidenceLevel.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 3, 1));
		btnConfidenceLevel.setText("Confidence Level");
		new Label(grpErrorBars, SWT.NONE);
		
		lblLevel = new Label(grpErrorBars, SWT.NONE);
		lblLevel.setEnabled(false);
		lblLevel.setText("Level (%):");
		
		sprConfidenceLevel = new Spinner(grpErrorBars, SWT.BORDER);
		sprConfidenceLevel.setEnabled(false);
		
		btnStandardError = new Button(grpErrorBars, SWT.RADIO);
		btnStandardError.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (btnStandardError.getSelection()){
					lblMultiplier.setEnabled(true);
					sprStandardErrorMultiplier.setEnabled(true);
				}else{
					lblMultiplier.setEnabled(false);
					sprStandardErrorMultiplier.setEnabled(false);
				}
			}
		});
		btnStandardError.setEnabled(false);
		btnStandardError.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 3, 1));
		btnStandardError.setText("Standard Error");
		new Label(grpErrorBars, SWT.NONE);
		
		lblMultiplier = new Label(grpErrorBars, SWT.NONE);
		lblMultiplier.setEnabled(false);
		lblMultiplier.setText("Multiplier:");
		
		sprStandardErrorMultiplier = new Spinner(grpErrorBars, SWT.BORDER);
		sprStandardErrorMultiplier.setEnabled(false);
		
		btnStandardDeviation = new Button(grpErrorBars, SWT.RADIO);
		btnStandardDeviation.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (btnStandardDeviation.getSelection()){
					lblMultiplier_1.setEnabled(true);
					sprStandardDeviationMultiplier.setEnabled(true);	
				}else{
					lblMultiplier_1.setEnabled(false);
					sprStandardDeviationMultiplier.setEnabled(false);
				}
			}
		});
		btnStandardDeviation.setEnabled(false);
		btnStandardDeviation.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 3, 1));
		btnStandardDeviation.setText("Standard Deviation");
		new Label(grpErrorBars, SWT.NONE);
		
		lblMultiplier_1 = new Label(grpErrorBars, SWT.NONE);
		lblMultiplier_1.setEnabled(false);
		lblMultiplier_1.setText("Multiplier");
		
		sprStandardDeviationMultiplier = new Spinner(grpErrorBars, SWT.BORDER);
		sprStandardDeviationMultiplier.setEnabled(false);
		
		Label lblNewLabel = new Label(composite_4, SWT.NONE);
		GridData gd_lblNewLabel = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		gd_lblNewLabel.heightHint = 229;
		lblNewLabel.setLayoutData(gd_lblNewLabel);
		
		initializeContent();
		return container;
	}
	
	void initializeContent(){
		listManager.initializeSingleButtonList(lstNumericVariables, lstVariables, btnVariables,new variableAxisHandler());
		listManager.initializeSingleSelectionList(lstFactors, txtCategorizedBy, btnCategorizedBy);
		listManager.initializeSingleButtonList(lstNumericVariables, lstClusterBarsBy, btnClusterBarsBy);
		listManager.initializeSingleSelectionList(lstFactors, txtGroupBy, btnGroupBy);
		listManager.initializeVariableMoveList(lstNumericVariables, lstFactors, btnSetToFactor , filePath);
		listManager.initializeNumericList(lstNumericVariables, filePath);
		listManager.initializeFactorList(lstFactors, filePath);	
		ArrayList<Integer> tableHeaderIdentity = new ArrayList<Integer>();
		
		tableHeaderIdentity.add(GraphTableManager.ROW_STATIC_TEXT);
		tableHeaderIdentity.add(GraphTableManager.ROW_TEXT);
		tableHeaderIdentity.add(GraphTableManager.ROW_TEXT);
		tableHeaderIdentity.add(GraphTableManager.ROW_TEXT);
		tableManager = new GraphTableManager(tblValueAxis, tableHeaderIdentity);
		tableManager.setTableIndex(0);
		
		
	}
	
	public class variableAxisHandler extends DialogListValidator{

		@Override
		public void postAddProcess(){
			addVariableAxis();			
		}		
		@Override
		public void postRemoveProcess(){
			removeVariableAxis();			
		}		
	}
	
	public void addVariableAxis(){
		
		for(String var : lstVariables.getItems()){
			if(!tableManager.tableMap.containsKey(var)){
				tableManager.addItem(new Object[]{var,var,"Auto","Auto"});
			}
		}
	}
	public void removeVariableAxis(){
		
		java.util.List<String> lstVar = Arrays.asList(lstVariables.getItems());
		 Set<String> lstTable = tableManager.tableMap.keySet();
		for(String tableKeys :lstTable ){
			if(!lstVar.contains(tableKeys)){
				int row = tableManager.tableMap.get(tableKeys);
				tableManager.deleteRow(row);
				tableManager.tableMap.remove(tableKeys);
			}
		}
	}
	
	void resetDialog(){
		
	}
	
	@Override
	protected void buttonPressed(int ID){
		if(ID == IDialogConstants.OK_ID){
			okPressed();
		}
		else if(ID == IDialogConstants.CANCEL_ID){
			cancelPressed();
		}
		else if(ID == IDialogConstants.RETRY_ID){
			resetDialog();		
		}
	}
	/**
	 * Create contents of the button bar.
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.DESELECT_ALL_ID, "Reset", true);
		btnOkay = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}
	
	protected void okPressed(){
		File outputFolder = GraphsUtilities.createOutputFolder(dataFile.getName(),analysisType);
		if(!outputFolder.exists()) outputFolder.mkdir();
		String dataFileName = dataFile.getAbsolutePath().replaceAll("\\\\", "/");
		String[] nVar = lstVariables.getItems();
		String cVar = txtCategorizedBy.getText();
		String[] clustVars = lstClusterBarsBy.getItems();
		String mTitle = txtMainTitle.getText();
		String[] yAxisLab = null; 
		String xAxisLab = null;
		String[] minValue = null;
		String[] maxValue= null;
		String typeData = "raw";
		String[] stat = {"NULL","mean","median","sum", "freq"}; 
		String descStat = "mean";		
		String barsHoriz = "FALSE";
		String barsClus = "FALSE";
		String byVar = txtGroupBy.getText();
		String errBars = "FALSE";
		String typeErrBar = null;
		int errMult = 1;
		double confLev = 0.95;
		int axisLabelStyle = 1;
		String[] barColor = {"rgb(192,192,192, max = 255)"};
		String showLeg = "FALSE";
		String legPos = null;	
		String legTitle = null;
		String legHoriz = "FALSE";
		String multGraphs = "FALSE";
		int numRowsGraphs = 1;
		int numColsGraphs = 1; 
		String orientGraphs = "top-bottom";
		String showCatVarLevels = "FALSE"; 
		int[] barDensity = {100};
		int[] barLineAngle = {0, 45};
		

		
		if(btnRawData.getSelection()){
			typeData = "raw";
//			descStat = cmbBarRepresents[cmbBarRepresents.getSelectionIndex()];
			descStat = stat[cmbBarRepresents.getSelectionIndex()];
		}else{
			descStat = null;
			typeData = "sumStat"; 
		}
		if(btnOrientationVertical.getSelection()) barsHoriz = "FALSE"; //"TRUE"; //
		else barsHoriz = "TRUE"; //

		if(btnStyleClustered.getSelection()) barsClus = "TRUE"; //"FALSE"; //
		else barsClus = "FALSE"; //

		if(btnDisplayErrorBars.getSelection() && btnDisplayErrorBars.getEnabled()) errBars = "TRUE";
		else  errBars = "FALSE";
		
		if (cmboAlignment.getText().equals("horizontal")){
			legHoriz = "TRUE";
		}else legHoriz = "FALSE";
		
		String boxed = "FALSE";
		if(btnDrawBoxAround.getSelection()) boxed = "TRUE"; //
		else boxed = "FALSE"; 
		
		axisLabelStyle = cmbAxisLabelOrientation.getSelectionIndex();
		txtCategoryAxisLabel.getText().equals(txtCategorizedBy);
		
		if(lstVariables.getItemCount()<1){
			MessageDialog.openWarning(getShell(), "Enter Required Fields", "Please add variable(s) from the numeric variables list.");
			return;
		};
		if(txtCategorizedBy.getText().isEmpty()){
			MessageDialog.openWarning(getShell(), "Enter Required Fields", "Please add variable(s) from the factor variables list.");
			return;
		};
		
		
		OperationProgressDialog rInfo = new OperationProgressDialog(getShell(), "Creating Bar Graph");
		rInfo.open();
		btnOkay.setEnabled(false);
		ProjectExplorerView.rJavaManager.getRJavaGraphManager().createGraphBarplot(
				outputFolder.getAbsolutePath().replaceAll("\\\\", "/")+"/", 
				dataFileName,
				nVar,
				cVar,
				clustVars, 
				mTitle, 
				yAxisLab, 
				xAxisLab, 
				minValue, 
				maxValue, 
				typeData, 
				descStat,
				barsHoriz, 
				barsClus, 
				byVar, 
				errBars,
				typeErrBar, 
				errMult, 
				confLev,
				axisLabelStyle,
				barColor, 
				showLeg, 
				legPos,
				legTitle, 
				legHoriz,
				boxed,
				multGraphs, 
				numRowsGraphs, 
				numColsGraphs, 
				orientGraphs, 
				showCatVarLevels, 
				barDensity, 
				barLineAngle
				);
		
		rInfo.close();
		WindowDialogControlUtil.hideAllWindowDialog();
		btnOkay.setEnabled(true);
		GraphsUtilities.openFolder(outputFolder);
		
	}
	
	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(810, 625);
	}
}
